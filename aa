# -*- coding: utf-8 -*-
"""
Created on Tue Dec 25 18:33:58 2018

@author: liwenhun
"""

import pandas as pd
import datetime

perf_sql_template = """
SELECT
{perf_cols},
repay_period,
D{num_of_days_pd},
M{num_of_days_pd},
D{num_of_days_pd}_account,
M{num_of_days_pd}_account,
addmonth,
adddate,
channel_type
FROM(
SELECT {perf_cols},
MAX(repay_period) over(partition by borrow_nid) AS  repay_period,
MAX(CASE WHEN STATUS IN (3,5) and DATEDIFF("{perf_end_date}",repay_time)>{num_of_days_pd} and borrow_nid is not null THEN 1 ELSE 0 END) over(partition by borrow_nid) D{num_of_days_pd},
MAX(CASE WHEN STATUS IN (3,5) and DATEDIFF("{perf_end_date}",repay_time)>{num_of_days_pd} and late_days>{num_of_days_pd} THEN 1 ELSE 0 END)  over(partition by borrow_nid) M{num_of_days_pd},
SUM(CASE WHEN STATUS in (3,5) and DATEDIFF("{perf_end_date}",repay_time)>{num_of_days_pd} then repay_capital else 0 end) over(partition by borrow_nid) D{num_of_days_pd}_account,
SUM(CASE WHEN STATUS in (3,5) and DATEDIFF("{perf_end_date}",repay_time)>{num_of_days_pd} and late_days>{num_of_days_pd} THEN repay_capital ELSE 0 END) over(partition by borrow_nid) M{num_of_days_pd}_account,
substring(add_time,1,7) addmonth,
substring(add_time,1,10) adddate,
case when channel_category == "流量超市API" then "API" else "others" end as channel_type,
row_number() over(partition by borrow_nid order by add_time) rn
FROM  jujube.dw_riskdata_zc_borrow_info
WHERE
add_product='shoujidai'
and borrow_type IN (6,8)
and add_time>="{perf_start_date}"
and is_new in (1,-1)
{repay_condition}
) a
inner join
(
select distinct(borrow_nid) as borrow_nid1 from rca.t_flow_node_result
where node_name =='系统准入筛选2-3' and result_code = "通过"
and create_time>="{perf_start_date}"
)b
on a.borrow_nid == b.borrow_nid1
WHERE a.rn==1
"""

eng_sql_template = """
select
apprequestid,
regexp_extract(apprequestid,'[0-9]+',0) as user_id_engine,
regexp_extract(apprequestid,'_([0-9]+)',1) as borrow_nid_engine,
{clauses}
from es_rule.biz_rule_engine_result a
where yr>={yr} and mn>={mn} and dt>={dt} and producttype=="sjd_zhaohui"
"""


class sql_generator(object):
    global perf_sql_template
    global eng_sql_template

    def __init__(self, perf_start_date=None, perf_end_date=None, con=None,
                 num_of_days_pd=30):
        self.perf_start_date = perf_start_date
        self.perf_end_date = perf_end_date
        self.con = con
        self.num_of_days_pd = num_of_days_pd
        self.sql = None

    def compose_perf_query(self, perf_cols=None, first_repay=False):
        num_of_days_pd = self.num_of_days_pd
        perf_start_date = self.perf_start_date
        perf_end_date = self.perf_end_date
        perf_cols = ", ".join(perf_cols)
        repay_condition = "and repay_period in (0,1)" if first_repay else ""

        if perf_end_date is None:
            perf_end_date = datetime.date.today().strftime("%Y-%m-%d")
        sql = perf_sql_template.format(perf_start_date=perf_start_date,
                                       perf_end_date=perf_end_date,
                                       num_of_days_pd=num_of_days_pd,
                                       perf_cols=perf_cols,
                                       repay_condition=repay_condition
                                       )
        return sql

    def compose_eng_query(self, eng_var_lst=None, rule_lst=None,
                          start_date="2018-01-01"):
        start_date = self.perf_start_date
        yr = start_date.split("-")[0]
        mn = start_date.split("-")[1]
        dt = start_date.split("-")[2]

        for lst in (eng_var_lst, rule_lst):
            if isinstance(lst, str):
                lst = [lst]

        get_json_clause_temp = "get_json_object(inputparam,'$.{var}') as {var}"
        get_json_clauses = [get_json_clause_temp.format(var=var)
                            for var in eng_var_lst]
        get_rule_clause_temp = """array_contains("""\
                               """split("""\
                               """ regexp_replace("""\
                               'get_json_object(outputparam,'\
                               '"$.d_middle_result"),'\
                               '"\\[|\\]",""),",")'\
                               """,'\\"{rule}\\"') as {rule}"""
        get_rule_clauses = [get_rule_clause_temp.format(rule=rule)
                            for rule in rule_lst]
        clauses = list()
        clauses += get_json_clauses
        clauses += (get_rule_clauses)
        result = eng_sql_template.format(clauses=",\n".join(clauses),
                                         yr=yr, mn=mn, dt=dt)
        return result

    def compose_query(self, perf_cols=None, eng_var_lst=None, rule_lst=None,
                      first_repay=False, *args, **kwargs):
        perf_start_date = self.perf_start_date
        perf_sql, eng_sql = None, None
        if perf_cols:
            perf_sql = self.compose_perf_query(perf_cols=perf_cols,
                                               first_repay=first_repay)
        if eng_var_lst or rule_lst:
            eng_sql = self.compose_eng_query(eng_var_lst=eng_var_lst,
                                             rule_lst=rule_lst,
                                             start_date=perf_start_date)
        if perf_sql and eng_sql:
            template = 'select a.*, b.*'\
                       'from ({perf_sql}) a '\
                       'left join ({eng_sql}) b '\
                       'on a.borrow_nid == b.borrow_nid_engine'

            sql = template.format(perf_sql=perf_sql, eng_sql=eng_sql)
        elif perf_sql:
            template = "select a.* from {perf_sql} a"
            sql = template.format(perf_sql=perf_sql)
        else:
            raise ValueError("there is no query passed for performance data")

        self.sql = sql
        return self.sql

    def get_data_from_db(self, *args, **kwargs):
        if self.con is None:
            raise ValueError("no database connection")
        if self.sql is None:
            raise ValueError("no sql, please call compose_query first")
        df = pd.read_sql(self.sql, self.con, *args, **kwargs)
        df.columns = df.columns.str.replace("^(a|b)\\.", "")
        return df
