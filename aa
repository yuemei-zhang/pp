


DROP TABLE policy_kyd.tmp_zym_big;
CREATE TABLE policy_kyd.tmp_zym_big AS
SELECT *,get_json_object(inputparam,'$.user_id')AS user_id
,get_json_object(outputparam,'$.customer_cluster_result') AS customer_cluster_result
,get_json_object(outputparam,'$.customer_cluster_result_code') AS customer_cluster_result_code
,get_json_object(inputparam,'$.customer_cluster_type') AS customer_cluster_type
,get_json_object(inputparam,'$.bank_auth_status') AS bank_auth_status
,get_json_object(inputparam,'$.gjj_auth_status') AS gjj_auth_status
,get_json_object(inputparam,'$.user_flag1') AS user_flag1
FROM es_rule.biz_rule_engine_result 
WHERE   producttype='Customer_cluster_judge' AND  yr=2018 AND tasktime>='20180422000000'

-- 选择当天最近的一笔
DROP TABLE policy_kyd.tmp_zym_big_new;
CREATE TABLE policy_kyd.tmp_zym_big_new AS
WITH td AS
 (SELECT mn,dt,tasktime,user_id,user_flag1,customer_cluster_result,customer_cluster_result_code,customer_cluster_type,bank_auth_status,gjj_auth_status,
row_number() over (PARTITION BY user_id,SUBSTRING(tasktime,1,8) ORDER BY tasktime DESC ) AS r1 FROM policy_kyd.tmp_zym_big) 
 SELECT * FROM td WHERE td.r1=1 AND td.user_flag1=1  

AND (td.bank_auth_status=1 OR td.gjj_auth_status=1) AND td.customer_cluster_type IN ('gongjijin_loan','credit_card_loan')
 
 
 /*将以上的表导到mysql中*/ 


 /*提取发起额度计算时间在调用大额判断模块之后的额度信息基础表*/
  DROP TABLE policy.tmp_zym_big_amount;
 CREATE TABLE policy.tmp_zym_big_amount AS 
 SELECT a.* FROM (
 SELECT a.user_id,a.amount,TYPE,ADDDATE,SUBSTR(FROM_UNIXTIME(a.addtime,'%Y%m%d%H%m%S'),1,8) AS ADDTIME,SUBSTR(b.tasktime,1,8) AS tasktime
 FROM  limit_mobp2p.`yyd_rca_calc_amount` a,policy.`tmp_zym_big_new` b
 WHERE a.ADDDATE>'2018-04-21' AND a.TYPE=2 AND a.user_type=1 AND SUBSTR(FROM_UNIXTIME(a.addtime,'%Y%m%d%H%m%S'),1,8)>=SUBSTR(b.tasktime,1,8) AND a.user_id =b.user_id
 ORDER BY user_id,ADDDATE DESC) a
 GROUP BY user_id;
 
  ALTER TABLE policy.`tmp_zym_big_amount` ADD INDEX(user_id);

  
  /*取出借款信息*/
    DROP TABLE policy.tmp_zym_big_borrow_1 ;
 CREATE TABLE policy.tmp_zym_big_borrow_1 AS 
 SELECT a.user_id,a.borrow_nid,a.account,a.STATUS,a.verifier_type,a.DAY,a.borrow_type,repay_capital,repay_time,repay_yestime,late_days,repay_status,
   SUBSTR(DATE_FORMAT(a.add_time,'%Y%m%d%H%m%S'),1,8)  AS add_time
 FROM  jujube.`dw_riskdata_zc_borrow_info` a
 WHERE a.add_time>'2018-04-21' AND a.borrow_type=8 AND a.is_new=1 AND a.user_id IN (SELECT DISTINCT user_Id FROM policy.`tmp_zym_big_new`  );
  
    ALTER TABLE policy.`tmp_zym_big_borrow_1` ADD INDEX(user_id);
    
   

  /*取出借款时间在额度计算和调用大额判断模块之后的借款信息*/
  DROP TABLE policy.tmp_zym_big_borrow ;
 CREATE TABLE policy.tmp_zym_big_borrow AS 
 SELECT a.*
 FROM  policy.tmp_zym_big_borrow_1 a,policy.`tmp_zym_big_new` b,policy.tmp_zym_big_amount c
 WHERE  a.user_id =b.user_id AND a.add_time>=SUBSTR(b.tasktime,1,8) AND  a.add_time-SUBSTR(b.tasktime,1,8)<100
       AND a.add_time>=c.ADDTIME AND a.user_id =c.user_id AND b.user_id=c.user_id;


   ALTER TABLE policy.`tmp_zym_big_borrow` ADD INDEX(user_id);
  

  /*拼接信息只取一期*/
    DROP TABLE policy.tmp_zym_big;
 CREATE TABLE policy.tmp_zym_big AS 
 SELECT DISTINCT a.user_id,a.tasktime,a.customer_cluster_result,a.customer_cluster_result_code,a.customer_cluster_type,a.bank_auth_status,a.gjj_auth_status
 ,b.amount,b.ADDDATE
 ,c.borrow_nid,c.status,c.verifier_type,c.account,c.day,ROUND(c.DAY/30)AS period,c.add_time
 FROM policy.`tmp_zym_big_new` a 
 LEFT JOIN policy.tmp_zym_big_amount b 
 ON a.user_id=b.user_id 
 LEFT JOIN policy.tmp_zym_big_borrow c
 ON a.user_id=c.user_id; 
 
 
 /*拼接信息取所有借款信息*/
 DROP TABLE policy.tmp_zym_big_1;
 CREATE TABLE policy.tmp_zym_big_1 AS 
 SELECT DISTINCT a.user_id,a.tasktime,DATE_FORMAT(a.tasktime,'%Y-%m-%d %H:%m:%S') AS atasktime ,a.customer_cluster_result,a.customer_cluster_result_code,a.customer_cluster_type,a.bank_auth_status,a.gjj_auth_status,b.amount,b.ADDDATE
 ,c.borrow_nid,c.status,c.verifier_type,c.account,c.day,ROUND(c.DAY/30)AS period,c.add_time,c.repay_capital,c.repay_time,c.repay_yestime,c.late_days,c.repay_status
 FROM policy.`tmp_zym_big_new` a 
 LEFT JOIN policy.tmp_zym_big_amount b 
 ON a.user_id=b.user_id 
 LEFT JOIN policy.tmp_zym_big_borrow c
 ON a.user_id=c.user_id 
 


/*进件量-----授权状态必须为成功1，这个之后上线其他产品的话，添加的授权状态也得为成功*/
SELECT SUBSTR(tasktime,1,8) AS DATE,customer_cluster_type,
COUNT(DISTINCT user_id) AS '进件量'
FROM policy.tmp_zym_big
WHERE (bank_auth_status=1 OR gjj_auth_status=1)  AND SUBSTR(tasktime,1,8)>='20180422'
GROUP BY 1,2
ORDER BY 2,1


/*符合客群量*/
SELECT SUBSTR(tasktime,1,8) AS DATE,customer_cluster_type,
COUNT(DISTINCT user_id) AS '符合客群量'
FROM policy.tmp_zym_big
WHERE  customer_cluster_result=1  AND SUBSTR(tasktime,1,8)>='20180422'
GROUP BY 1,2 
ORDER BY 2,1


/*额度计算人数*/
SELECT SUBSTR(tasktime,1,8) AS DATE,customer_cluster_type,COUNT(DISTINCT user_id),
SUM(CASE WHEN amount IS NOT NULL THEN 1 ELSE 0 END) AS '计算额度人数',
SUM(CASE WHEN amount>0 THEN 1 ELSE 0 END) AS '成功计算额度人数',
SUM(CASE WHEN amount>0 THEN amount ELSE 0 END) AS '成功计算额度金额',
SUM(CASE WHEN amount<=5000 AND amount>0 THEN 1 END) AS '0-5k',
SUM(CASE WHEN amount<=10000 AND amount>5000 THEN 1 END) AS '5k-1w',
SUM(CASE WHEN amount<=20000 AND amount>10000 THEN 1 END) AS '1w-2w',
SUM(CASE WHEN amount>20000 THEN 1 END) AS '2w+',
SUM(CASE WHEN STATUS IS NOT NULL THEN 1 END) AS '借款人数',
SUM(CASE WHEN verifier_type=1 AND STATUS =2 THEN 1 END) AS '系统拒绝',
SUM(CASE WHEN STATUS=0 THEN 1 END) AS '待审核',
SUM(CASE WHEN STATUS IN (1,3,4,5,6,7,8,9) THEN 1 END) AS '过件人数',
SUM(CASE WHEN STATUS IN (1,3,4,5,6,7,8,9) THEN account END) AS '过件金额'
FROM policy.tmp_zym_big
WHERE customer_cluster_result=1  AND SUBSTR(tasktime,1,8)>='20180422' 
GROUP BY 1,2 
ORDER BY 2,1

/*申请期数分布*/
SELECT SUBSTR(tasktime,1,8) AS DATE,customer_cluster_type,period,COUNT(DISTINCT user_id)
FROM policy.tmp_zym_big
WHERE customer_cluster_result=1 AND STATUS IS NOT NULL  AND  SUBSTR(tasktime,1,8)>='20180422' 
GROUP BY 1,2,3
ORDER BY 2,1,3


/*过件期数分布*/
SELECT SUBSTR(tasktime,1,8) AS DATE,customer_cluster_type,period,COUNT(DISTINCT user_id)
FROM policy.tmp_zym_big
WHERE customer_cluster_result=1 AND STATUS IN (1,3,4,5,6,7,8,9)   AND SUBSTR(tasktime,1,8)>='20180422'
GROUP BY 1,2,3
ORDER BY 2,1,3


SET @riqi1='2018-06-09 00:00:00';



/*还款数据*/
SELECT SUBSTR(repay_time,1,10),customer_cluster_type,COUNT(borrow_nid),SUM(CASE WHEN late_days>0 THEN '1' ELSE '0' END) AS '入催',
SUM(CASE WHEN (late_days>0 AND repay_status='LATE_REPAYING' ) THEN '1' ELSE '0' END) AS '未还款',
ROUND(SUM(repay_capital)),
ROUND(SUM(CASE WHEN late_days>0 THEN repay_capital ELSE '0' END)) AS '入催金额',
ROUND(SUM(CASE WHEN (late_days>0 AND repay_status='LATE_REPAYING' ) THEN repay_capital ELSE '0' END)) AS '未还款金额'
FROM  policy.tmp_zym_big_1
WHERE  customer_cluster_result=1 AND  STATUS IN (3,5) AND repay_time<@riqi1
GROUP BY 1,2 
ORDER BY 2,1


/*回款数据*/
SELECT SUBSTRING(repay_time,1,10) AS repay_time,customer_cluster_type,
SUM(CASE WHEN late_days<=1 THEN '1' ELSE '0' END)  AS 1rihuikuan,
SUM(CASE WHEN late_days<=3 THEN '1' ELSE '0' END)  AS 3rihuikuan,
SUM(CASE WHEN late_days<=10 THEN '1' ELSE '0' END)  AS 10rihuikuan,
ROUND(SUM(CASE WHEN late_days<=1 THEN repay_capital ELSE '0' END)) AS 1rihuikuan_amount,
ROUND(SUM(CASE WHEN late_days<=3 THEN repay_capital ELSE '0' END)) AS 3rihuikuan_amount,
ROUND(SUM(CASE WHEN late_days<=10 THEN repay_capital ELSE '0' END)) AS 10rihuikuan_amount
FROM  policy.tmp_zym_big_1
WHERE  repay_time<@riqi1 AND  (repay_status='LATE_END' AND repay_yestime<@riqi1)
GROUP BY SUBSTRING(repay_time,1,10),customer_cluster_type
ORDER BY customer_cluster_type,SUBSTRING(repay_time,1,10)

备注：auth_status字段7.3上线

DROP TABLE policy_kyd.tmp_zym_big;
CREATE TABLE policy_kyd.tmp_zym_big AS
SELECT *,get_json_object(inputparam,'$.user_id')AS user_id,get_json_object(outputparam,'$.customer_cluster_result') AS customer_cluster_result,
get_json_object(outputparam,'$.customer_cluster_result_code') AS customer_cluster_result_code,get_json_object(inputparam,'$.customer_cluster_type') AS customer_cluster_type
,get_json_object(outputparam,'$.auth_status') AS auth_status
,get_json_object(inputparam,'$.bank_auth_status') AS bank_auth_status
,get_json_object(inputparam,'$.gjj_auth_status') AS gjj_auth_status
,get_json_object(inputparam,'$.user_flag1') AS user_flag1
FROM es_rule.biz_rule_engine_result 
WHERE   producttype='Customer_cluster_judge' AND  yr=2018 AND tasktime>='20180422000000';

-- 改进 选择当天最近的一笔(注：这个表需要用来计算进件量)
DROP TABLE policy_kyd.tmp_zym_big_new;
CREATE TABLE policy_kyd.tmp_zym_big_new AS
WITH td AS
 (SELECT mn,dt,tasktime,user_id,user_flag1,customer_cluster_result,customer_cluster_result_code,customer_cluster_type,auth_status,
 row_number() over (PARTITION BY user_id,SUBSTRING(tasktime,1,8) ORDER BY tasktime DESC ) AS r1 FROM policy_kyd.tmp_zym_big) 
 SELECT * FROM td WHERE td.r1=1 AND td.user_flag1=1  AND (td.auth_status=1 or td.bank_auth_status=1 OR td.gjj_auth_status=1)
     
-- 提取符合客群判断的用户(条件：customer_cluster_result=1)
DROP TABLE policy_kyd.tmp_zym_big_new_1;
CREATE TABLE policy_kyd.tmp_zym_big_new_1 AS
SELECT a.*,CONCAT(SUBSTRING(tasktime,1,4),'-',SUBSTRING(tasktime,5,2),'-',SUBSTRING(tasktime,7,2),' ',SUBSTRING(tasktime,9,2),':',SUBSTRING(tasktime,11,2),':',SUBSTRING(tasktime,13,2)) AS task_time
FROM policy_kyd.tmp_zym_big_new a
WHERE customer_cluster_result=1;

 -- 提取额度信息基础表(条件： b.TYPE=2 AND b.user_type=1 且发起额度计算的时间在调用引擎时间tasktime之后30天以内)
 DROP TABLE policy_kyd.tmp_zym_big_amount;
 CREATE TABLE policy_kyd.tmp_zym_big_amount AS 
WITH td AS
 ( SELECT a.user_id,a.task_time,a.customer_cluster_type,b.amount,b.TYPE,ADDDATE,DATEDIFF(b.ADDDATE,a.task_time) AS DAY
 FROM  policy_kyd.tmp_zym_big_new_1  a
 LEFT JOIN limit_mobp2p.`yyd_rca_calc_amount` b
 ON  a.user_id =b.user_id 
 WHERE  b.ADDDATE>'2018-04-21' AND b.TYPE=2 AND b.user_type=1)
 SELECT * FROM td WHERE DAY>=0 AND DAY<=30;
 

 -- 取额度计算当天最新的一笔 (条件：按发起额度计算的日期排序取当天最新的一笔)
 DROP TABLE policy_kyd.tmp_zym_big_amount_1;
CREATE TABLE policy_kyd.tmp_zym_big_amount_1 AS
WITH td AS
 (SELECT *,row_number() over (PARTITION BY user_id,to_date(ADDDATE) ORDER BY ADDDATE DESC,DAY ASC) AS r1 FROM policy_kyd.tmp_zym_big_amount) 
 SELECT * FROM td WHERE td.r1=1;
 
 -- 取发起额度计算的最新的一笔 (条件：可能匹配到多个发起额度计算的记录，取最新一笔)
 DROP TABLE policy_kyd.tmp_zym_big_amount_2;
 CREATE TABLE policy_kyd.tmp_zym_big_amount_2 AS
WITH td AS
 (SELECT *,row_number() over (PARTITION BY user_id,to_date(task_time) ORDER BY task_time DESC,DAY ASC) AS r2 FROM policy_kyd.tmp_zym_big_amount_1) 
 SELECT * FROM td WHERE td.r2=1;




  -- 提取借款信息基础表(条件：borrow_type=8 AND b.is_new_product=1 且发起借款的时间在发起额度计算之后)
 DROP TABLE policy_kyd.tmp_zym_big_borrow;
 CREATE TABLE policy_kyd.tmp_zym_big_borrow AS 
WITH td AS
 ( SELECT a.user_id,a.task_time,a.customer_cluster_type,a.amount,a.adddate,b.add_time,b.account,b.borrow_nid,b.STATUS,b.borrow_period,b.borrow_type,b.verify_type,
 repay_capital,repay_time,repay_yestime,late_days,repay_status,DATEDIFF(b.add_time,a.ADDDATE) AS DAY
 FROM  policy_kyd.tmp_zym_big_amount_2  a
 LEFT JOIN jujube_dw.t_adl_borrow_sjd b
 ON  a.user_id =b.user_id 
WHERE b.add_time>'2018-04-21' AND b.borrow_type=8 AND b.is_new_product=1)
 SELECT * FROM td WHERE DAY>=0 AND DAY<=30;
 
-- 取同一个借款信息距离时间最短的
DROP TABLE policy_kyd.tmp_zym_big_borrow_1;
CREATE TABLE policy_kyd.tmp_zym_big_borrow_1 AS
WITH td AS
 (SELECT *,row_number() over (PARTITION BY user_id,to_date(add_time) ORDER BY DAY ASC) AS r1 FROM policy_kyd.tmp_zym_big_borrow) 
 SELECT * FROM td WHERE td.r1=1;

--用borrow_nid 可确认是否为大额
