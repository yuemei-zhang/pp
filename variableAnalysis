{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import datetime\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "pd.set_option('display.max_seq_items',1000)\n",
    "pd.set_option('display.max_columns',1000)\n",
    "current_year =  datetime.datetime.now().year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df =  pd.read_csv('z_gf_sample_L0_20160719.csv',low_memory=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 数据提取\n",
    "* 身份证号作为主键\n",
    "* 银联变量作为X值\n",
    "* 卡逾期作为Y值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "VAR_LIST  = ['CARDNO','BIRTHDATE_CUST','S0476', 'S0483', 'S0106', 'S0005','S0467', 'S0474', 'S0048', 'S0047', \n",
    "             'S0010', 'S0046', 'S0045', 'S0464', 'S0501', 'S0122', 'S0174','APP_EXT_CARD_AMT_PDUE']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 数据清洗\n",
    "* S0045全为空值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df =  df[VAR_LIST]\n",
    "df_clean = df.drop(['S0045'],axis=1)\n",
    "df_clean = df_clean.dropna(axis=0, how='all', subset=['APP_EXT_CARD_AMT_PDUE'])\n",
    "df_clean = df_clean.dropna(axis=0, how='all', subset=['BIRTHDATE_CUST'])\n",
    "df_clean = df_clean.dropna(axis=0, how='all', subset=['S0476', 'S0483', 'S0106', 'S0005','S0467', 'S0474', 'S0048', 'S0047', \n",
    "                                        'S0010', 'S0046', 'S0464', 'S0501', 'S0122', 'S0174'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CARDNO</th>\n",
       "      <th>BIRTHDATE_CUST</th>\n",
       "      <th>S0476</th>\n",
       "      <th>S0483</th>\n",
       "      <th>S0106</th>\n",
       "      <th>S0005</th>\n",
       "      <th>S0467</th>\n",
       "      <th>S0474</th>\n",
       "      <th>S0048</th>\n",
       "      <th>S0047</th>\n",
       "      <th>S0010</th>\n",
       "      <th>S0046</th>\n",
       "      <th>S0464</th>\n",
       "      <th>S0501</th>\n",
       "      <th>S0122</th>\n",
       "      <th>S0174</th>\n",
       "      <th>APP_EXT_CARD_AMT_PDUE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>$1B783F32E82478C49DCDFE5130449C46293B39148147409C</td>\n",
       "      <td>19841011.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>$F800454C466C4E6EC06FF5DC46ED829A1A48A0E6792BE92F</td>\n",
       "      <td>19860919.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2900.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25060.14</td>\n",
       "      <td>65729.47</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>$F0E7CEAC5705297E692FBF1F3FAB3D032CABD08D25FDFACB</td>\n",
       "      <td>19831007.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5880.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10855.82</td>\n",
       "      <td>11201.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>$A06B7DFD68C9FDA3D2E8B074CD567B22FE12ED060AD91E1C</td>\n",
       "      <td>19880707.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4730.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>15081.07</td>\n",
       "      <td>49128.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>$F4F0684DC73E47B357204C68FCA0E5AB46FAB98D4A0D28D8</td>\n",
       "      <td>19911011.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3310.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>12306.45</td>\n",
       "      <td>64523.43</td>\n",
       "      <td>487.01</td>\n",
       "      <td>1.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               CARDNO  BIRTHDATE_CUST  S0476  \\\n",
       "4   $1B783F32E82478C49DCDFE5130449C46293B39148147409C      19841011.0    0.0   \n",
       "10  $F800454C466C4E6EC06FF5DC46ED829A1A48A0E6792BE92F      19860919.0    0.0   \n",
       "24  $F0E7CEAC5705297E692FBF1F3FAB3D032CABD08D25FDFACB      19831007.0    0.0   \n",
       "26  $A06B7DFD68C9FDA3D2E8B074CD567B22FE12ED060AD91E1C      19880707.0    4.0   \n",
       "41  $F4F0684DC73E47B357204C68FCA0E5AB46FAB98D4A0D28D8      19911011.0    4.0   \n",
       "\n",
       "     S0483  S0106  S0005  S0467     S0474     S0048   S0047  S0010  S0046  \\\n",
       "4      0.0    0.0    0.0    0.0      0.00      0.00    0.00    0.0    0.0   \n",
       "10  2900.0    0.0    0.0    0.0  25060.14  65729.47    0.00    3.0   11.0   \n",
       "24  5880.0    0.0    0.0    0.0  10855.82  11201.00    0.00    0.0    3.0   \n",
       "26  4730.0    0.0    0.0    2.0  15081.07  49128.00    0.00    5.0   16.0   \n",
       "41  3310.0    0.0    0.0    1.0  12306.45  64523.43  487.01    1.0   46.0   \n",
       "\n",
       "    S0464  S0501  S0122  S0174 APP_EXT_CARD_AMT_PDUE  \n",
       "4     0.0    0.0    0.0    0.0                     A  \n",
       "10    2.0    2.0   15.0   74.0                     A  \n",
       "24    1.0    1.0   85.0    0.0                     D  \n",
       "26    2.0    9.0   20.0    0.0                     A  \n",
       "41    1.0   20.0   25.0    2.0                     F  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 数据标签字典\n",
    "* S0476 类别型 消费档次\n",
    "* S0483\t类别型 常住城市（交易笔数最多)\n",
    "* S0106\t数值型 境外交易金额占比\n",
    "* S0005\t类别型 资产标记\n",
    "* S0467\t类别型 卡等级\n",
    "* S0474\t数值型 月还贷能力评测（预授信额度）\n",
    "* S0048\t数值型 每月出帐额\n",
    "* S0047\t数值型 每月入账额\n",
    "* S0010\t数值型 单笔5000元以上的交易笔数\n",
    "* S0046\t数值型 每月交易笔数\n",
    "* S0464\t类别型 卡性质\n",
    "* S0501\t数值型 每月出行\n",
    "* S0122\t数值型 年交易金额在本市的排名\n",
    "* S0174\t数值型 夜消费金额占比\n",
    "* AGE   数值型 年龄 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_clean['BIRTHDATE_CUST'] = df_clean.BIRTHDATE_CUST.astype('int').astype('str')\n",
    "df_clean['S0476'] = df_clean.S0476.astype('int')\n",
    "df_clean['S0483'] = df_clean.S0483.astype('int')\n",
    "df_clean['S0106'] = df_clean.S0106.astype('float')\n",
    "df_clean['S0005'] = df_clean.S0005.astype('int')\n",
    "df_clean['S0467'] = df_clean.S0467.astype('int')\n",
    "df_clean['S0474'] = df_clean.S0474.astype('float')\n",
    "df_clean['S0048'] = df_clean.S0048.astype('float')\n",
    "df_clean['S0047'] = df_clean.S0047.astype('float')\n",
    "df_clean['S0010'] = df_clean.S0010.astype('int')\n",
    "df_clean['S0046'] = df_clean.S0046.astype('int')\n",
    "df_clean['S0464'] = df_clean.S0464.astype('int')\n",
    "df_clean['S0501'] = df_clean.S0501.astype('int')\n",
    "df_clean['S0122'] = df_clean.S0122.astype('float')\n",
    "df_clean['S0174'] = df_clean.S0174.astype('float')\n",
    "df_clean['AGE'] =  df_clean.BIRTHDATE_CUST.apply(lambda x : current_year - int(x[:4]))\n",
    "df_clean = df_clean.drop('BIRTHDATE_CUST', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CARDNO</th>\n",
       "      <th>S0476</th>\n",
       "      <th>S0483</th>\n",
       "      <th>S0106</th>\n",
       "      <th>S0005</th>\n",
       "      <th>S0467</th>\n",
       "      <th>S0474</th>\n",
       "      <th>S0048</th>\n",
       "      <th>S0047</th>\n",
       "      <th>S0010</th>\n",
       "      <th>S0046</th>\n",
       "      <th>S0464</th>\n",
       "      <th>S0501</th>\n",
       "      <th>S0122</th>\n",
       "      <th>S0174</th>\n",
       "      <th>APP_EXT_CARD_AMT_PDUE</th>\n",
       "      <th>AGE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>$1B783F32E82478C49DCDFE5130449C46293B39148147409C</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>$F800454C466C4E6EC06FF5DC46ED829A1A48A0E6792BE92F</td>\n",
       "      <td>0</td>\n",
       "      <td>2900</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>25060.14</td>\n",
       "      <td>65729.47</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>A</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>$F0E7CEAC5705297E692FBF1F3FAB3D032CABD08D25FDFACB</td>\n",
       "      <td>0</td>\n",
       "      <td>5880</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10855.82</td>\n",
       "      <td>11201.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>85.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>$A06B7DFD68C9FDA3D2E8B074CD567B22FE12ED060AD91E1C</td>\n",
       "      <td>4</td>\n",
       "      <td>4730</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>15081.07</td>\n",
       "      <td>49128.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>$F4F0684DC73E47B357204C68FCA0E5AB46FAB98D4A0D28D8</td>\n",
       "      <td>4</td>\n",
       "      <td>3310</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>12306.45</td>\n",
       "      <td>64523.43</td>\n",
       "      <td>487.01</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>25.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>F</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               CARDNO  S0476  S0483  S0106  \\\n",
       "4   $1B783F32E82478C49DCDFE5130449C46293B39148147409C      0      0    0.0   \n",
       "10  $F800454C466C4E6EC06FF5DC46ED829A1A48A0E6792BE92F      0   2900    0.0   \n",
       "24  $F0E7CEAC5705297E692FBF1F3FAB3D032CABD08D25FDFACB      0   5880    0.0   \n",
       "26  $A06B7DFD68C9FDA3D2E8B074CD567B22FE12ED060AD91E1C      4   4730    0.0   \n",
       "41  $F4F0684DC73E47B357204C68FCA0E5AB46FAB98D4A0D28D8      4   3310    0.0   \n",
       "\n",
       "    S0005  S0467     S0474     S0048   S0047  S0010  S0046  S0464  S0501  \\\n",
       "4       0      0      0.00      0.00    0.00      0      0      0      0   \n",
       "10      0      0  25060.14  65729.47    0.00      3     11      2      2   \n",
       "24      0      0  10855.82  11201.00    0.00      0      3      1      1   \n",
       "26      0      2  15081.07  49128.00    0.00      5     16      2      9   \n",
       "41      0      1  12306.45  64523.43  487.01      1     46      1     20   \n",
       "\n",
       "    S0122  S0174 APP_EXT_CARD_AMT_PDUE  AGE  \n",
       "4     0.0    0.0                     A   33  \n",
       "10   15.0   74.0                     A   31  \n",
       "24   85.0    0.0                     D   34  \n",
       "26   20.0    0.0                     A   29  \n",
       "41   25.0    2.0                     F   26  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Y值数据分布"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "A    12178\n",
       "F     1267\n",
       "D      503\n",
       "C      420\n",
       "E      234\n",
       "B      189\n",
       "Name: APP_EXT_CARD_AMT_PDUE, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.APP_EXT_CARD_AMT_PDUE.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 变量探索"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 消费档次 S0476 [0,1,2,3,4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4    9107\n",
       "0    5363\n",
       "1     137\n",
       "3      97\n",
       "2      87\n",
       "Name: S0476, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0476.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['S0476'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['S0476'])\n",
    "tab_S0476 = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_S0476.columns=['Good','Bad']\n",
    "tab_S0476['Good&Bad'] = tab_S0476.Good+tab_S0476.Bad\n",
    "tab_S0476['TotalGood'] = tab_S0476.Good.sum()\n",
    "tab_S0476['TotalBad'] = tab_S0476.Bad.sum()\n",
    "tab_S0476['WoE'] = np.log((tab_S0476.Bad/tab_S0476.TotalBad)/(tab_S0476.Good/tab_S0476.TotalGood))\n",
    "tab_S0476['IV'] = ((tab_S0476.Bad/tab_S0476.TotalBad)-(tab_S0476.Good/tab_S0476.TotalGood))*tab_S0476.WoE\n",
    "tab_S0476['IV_sum'] = tab_S0476.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S0476</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4529</td>\n",
       "      <td>561</td>\n",
       "      <td>5090</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.159884</td>\n",
       "      <td>0.008786</td>\n",
       "      <td>0.01469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>115</td>\n",
       "      <td>14</td>\n",
       "      <td>129</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.177223</td>\n",
       "      <td>0.000272</td>\n",
       "      <td>0.01469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>77</td>\n",
       "      <td>9</td>\n",
       "      <td>86</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.217929</td>\n",
       "      <td>0.000270</td>\n",
       "      <td>0.01469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>81</td>\n",
       "      <td>11</td>\n",
       "      <td>92</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.067902</td>\n",
       "      <td>0.000030</td>\n",
       "      <td>0.01469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7376</td>\n",
       "      <td>1175</td>\n",
       "      <td>8551</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.091688</td>\n",
       "      <td>0.005333</td>\n",
       "      <td>0.01469</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Good   Bad  Good&Bad  TotalGood  TotalBad       WoE        IV   IV_sum\n",
       "S0476                                                                        \n",
       "0      4529   561      5090      12178      1770 -0.159884  0.008786  0.01469\n",
       "1       115    14       129      12178      1770 -0.177223  0.000272  0.01469\n",
       "2        77     9        86      12178      1770 -0.217929  0.000270  0.01469\n",
       "3        81    11        92      12178      1770 -0.067902  0.000030  0.01469\n",
       "4      7376  1175      8551      12178      1770  0.091688  0.005333  0.01469"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_S0476"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 资产标记 S0005 [0,1,2,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    14112\n",
       "2      358\n",
       "1      290\n",
       "3       31\n",
       "Name: S0005, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0005.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['S0005'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['S0005'])\n",
    "tab_S0005 = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_S0005.columns=['Good','Bad']\n",
    "tab_S0005['Good&Bad'] = tab_S0005.Good+tab_S0005.Bad\n",
    "tab_S0005['TotalGood'] = tab_S0005.Good.sum()\n",
    "tab_S0005['TotalBad'] = tab_S0005.Bad.sum()\n",
    "tab_S0005['WoE'] = np.log((tab_S0005.Bad/tab_S0005.TotalBad)/(tab_S0005.Good/tab_S0005.TotalGood))\n",
    "tab_S0005['IV'] = ((tab_S0005.Bad/tab_S0005.TotalBad)-(tab_S0005.Good/tab_S0005.TotalGood))*tab_S0005.WoE\n",
    "tab_S0005['IV_sum'] = tab_S0005.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S0005</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11619</td>\n",
       "      <td>1696</td>\n",
       "      <td>13315</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.004282</td>\n",
       "      <td>1.753423e-05</td>\n",
       "      <td>0.001127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>239</td>\n",
       "      <td>27</td>\n",
       "      <td>266</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.251975</td>\n",
       "      <td>1.101463e-03</td>\n",
       "      <td>0.001127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>294</td>\n",
       "      <td>43</td>\n",
       "      <td>337</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.006272</td>\n",
       "      <td>9.526314e-07</td>\n",
       "      <td>0.001127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26</td>\n",
       "      <td>4</td>\n",
       "      <td>30</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.056849</td>\n",
       "      <td>7.099882e-06</td>\n",
       "      <td>0.001127</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Good   Bad  Good&Bad  TotalGood  TotalBad       WoE            IV  \\\n",
       "S0005                                                                       \n",
       "0      11619  1696     13315      12178      1770  0.004282  1.753423e-05   \n",
       "1        239    27       266      12178      1770 -0.251975  1.101463e-03   \n",
       "2        294    43       337      12178      1770  0.006272  9.526314e-07   \n",
       "3         26     4        30      12178      1770  0.056849  7.099882e-06   \n",
       "\n",
       "         IV_sum  \n",
       "S0005            \n",
       "0      0.001127  \n",
       "1      0.001127  \n",
       "2      0.001127  \n",
       "3      0.001127  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_S0005"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 卡等级 S0467 [0,1,2,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    9896\n",
       "1    4236\n",
       "2     637\n",
       "3      22\n",
       "Name: S0467, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0467.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['S0467'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['S0467'])\n",
    "tab_S0467 = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_S0467.columns=['Good','Bad']\n",
    "tab_S0467['Good&Bad'] = tab_S0467.Good+tab_S0467.Bad\n",
    "tab_S0467['TotalGood'] = tab_S0467.Good.sum()\n",
    "tab_S0467['TotalBad'] = tab_S0467.Bad.sum()\n",
    "tab_S0467['WoE'] = np.log((tab_S0467.Bad/tab_S0467.TotalBad)/(tab_S0467.Good/tab_S0467.TotalGood))\n",
    "tab_S0467['IV'] = ((tab_S0467.Bad/tab_S0467.TotalBad)-(tab_S0467.Good/tab_S0467.TotalGood))*tab_S0467.WoE\n",
    "tab_S0467['IV_sum'] = tab_S0467.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S0467</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8230</td>\n",
       "      <td>1122</td>\n",
       "      <td>9352</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.064022</td>\n",
       "      <td>0.002683</td>\n",
       "      <td>0.008063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3404</td>\n",
       "      <td>565</td>\n",
       "      <td>3969</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.132771</td>\n",
       "      <td>0.005269</td>\n",
       "      <td>0.008063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>525</td>\n",
       "      <td>80</td>\n",
       "      <td>605</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.047280</td>\n",
       "      <td>0.000099</td>\n",
       "      <td>0.008063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19</td>\n",
       "      <td>3</td>\n",
       "      <td>22</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.082825</td>\n",
       "      <td>0.000011</td>\n",
       "      <td>0.008063</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Good   Bad  Good&Bad  TotalGood  TotalBad       WoE        IV    IV_sum\n",
       "S0467                                                                         \n",
       "0      8230  1122      9352      12178      1770 -0.064022  0.002683  0.008063\n",
       "1      3404   565      3969      12178      1770  0.132771  0.005269  0.008063\n",
       "2       525    80       605      12178      1770  0.047280  0.000099  0.008063\n",
       "3        19     3        22      12178      1770  0.082825  0.000011  0.008063"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_S0467"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 卡性质 S0464 [0,1,2,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    7668\n",
       "0    3811\n",
       "2    3220\n",
       "3      92\n",
       "Name: S0464, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0464.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['S0464'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['S0464'])\n",
    "tab_S0464 = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_S0464.columns=['Good','Bad']\n",
    "tab_S0464['Good&Bad'] = tab_S0464.Good+tab_S0464.Bad\n",
    "tab_S0464['TotalGood'] = tab_S0464.Good.sum()\n",
    "tab_S0464['TotalBad'] = tab_S0464.Bad.sum()\n",
    "tab_S0464['WoE'] = np.log((tab_S0464.Bad/tab_S0464.TotalBad)/(tab_S0464.Good/tab_S0464.TotalGood))\n",
    "tab_S0464['IV'] = ((tab_S0464.Bad/tab_S0464.TotalBad)-(tab_S0464.Good/tab_S0464.TotalGood))*tab_S0464.WoE\n",
    "tab_S0464['IV_sum'] = tab_S0464.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S0464</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3194</td>\n",
       "      <td>417</td>\n",
       "      <td>3611</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.107292</td>\n",
       "      <td>0.002863</td>\n",
       "      <td>0.007874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6261</td>\n",
       "      <td>973</td>\n",
       "      <td>7234</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.066940</td>\n",
       "      <td>0.002383</td>\n",
       "      <td>0.007874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2639</td>\n",
       "      <td>374</td>\n",
       "      <td>3013</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.025248</td>\n",
       "      <td>0.000136</td>\n",
       "      <td>0.007874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>84</td>\n",
       "      <td>6</td>\n",
       "      <td>90</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.710406</td>\n",
       "      <td>0.002492</td>\n",
       "      <td>0.007874</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Good  Bad  Good&Bad  TotalGood  TotalBad       WoE        IV    IV_sum\n",
       "S0464                                                                        \n",
       "0      3194  417      3611      12178      1770 -0.107292  0.002863  0.007874\n",
       "1      6261  973      7234      12178      1770  0.066940  0.002383  0.007874\n",
       "2      2639  374      3013      12178      1770 -0.025248  0.000136  0.007874\n",
       "3        84    6        90      12178      1770 -0.710406  0.002492  0.007874"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_S0464"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 境外交易金额占比 S0106"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c80be2c630>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c81fe61ac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_clean.S0106.plot(kind='box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def S0106_f(x):\n",
    "    if x < 0:\n",
    "        return 1\n",
    "    elif x==0:\n",
    "        return 0\n",
    "    else:\n",
    "        return 2\n",
    "    \n",
    "df_clean['S0106_bin'] = df_clean.S0106.map(S0106_f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    14207\n",
       "2      533\n",
       "1       51\n",
       "Name: S0106_bin, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0106_bin.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['S0106_bin'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['S0106_bin'])\n",
    "tab_S0106_bin = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_S0106_bin.columns=['Good','Bad']\n",
    "tab_S0106_bin['Good&Bad'] = tab_S0106_bin.Good+tab_S0106_bin.Bad\n",
    "tab_S0106_bin['TotalGood'] = tab_S0106_bin.Good.sum()\n",
    "tab_S0106_bin['TotalBad'] = tab_S0106_bin.Bad.sum()\n",
    "tab_S0106_bin['WoE'] = np.log((tab_S0106_bin.Bad/tab_S0106_bin.TotalBad)/(tab_S0106_bin.Good/tab_S0106_bin.TotalGood))\n",
    "tab_S0106_bin['IV'] = ((tab_S0106_bin.Bad/tab_S0106_bin.TotalBad)-(tab_S0106_bin.Good/tab_S0106_bin.TotalGood))*tab_S0106_bin.WoE\n",
    "tab_S0106_bin['IV_sum'] = tab_S0106_bin.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S0106_bin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11692</td>\n",
       "      <td>1707</td>\n",
       "      <td>13399</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.004484</td>\n",
       "      <td>0.000019</td>\n",
       "      <td>0.000964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45</td>\n",
       "      <td>4</td>\n",
       "      <td>49</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.491717</td>\n",
       "      <td>0.000706</td>\n",
       "      <td>0.000964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>441</td>\n",
       "      <td>59</td>\n",
       "      <td>500</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.082856</td>\n",
       "      <td>0.000239</td>\n",
       "      <td>0.000964</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Good   Bad  Good&Bad  TotalGood  TotalBad       WoE        IV  \\\n",
       "S0106_bin                                                                   \n",
       "0          11692  1707     13399      12178      1770  0.004484  0.000019   \n",
       "1             45     4        49      12178      1770 -0.491717  0.000706   \n",
       "2            441    59       500      12178      1770 -0.082856  0.000239   \n",
       "\n",
       "             IV_sum  \n",
       "S0106_bin            \n",
       "0          0.000964  \n",
       "1          0.000964  \n",
       "2          0.000964  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_S0106_bin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  月还贷能力评测（预授信额度）S0474 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-10000, 200000)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c80bfe0518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_clean.S0474.plot(kind='box')\n",
    "plt.ylim((-10000,200000))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1.479100e+04\n",
       "mean     1.499641e+04\n",
       "std      4.816514e+04\n",
       "min      0.000000e+00\n",
       "25%      0.000000e+00\n",
       "50%      1.096287e+04\n",
       "75%      1.331393e+04\n",
       "max      3.235759e+06\n",
       "Name: S0474, dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0474.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_clean['S0474_bin'] = pd.cut(df_clean.S0474, bins=[-1,5000,10000,20000,60000,np.inf],labels=np.arange(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['S0474_bin'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['S0474_bin'])\n",
    "tab_S0474_bin = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_S0474_bin.columns=['Good','Bad']\n",
    "tab_S0474_bin['Good&Bad'] = tab_S0474_bin.Good+tab_S0474_bin.Bad\n",
    "tab_S0474_bin['TotalGood'] = tab_S0474_bin.Good.sum()\n",
    "tab_S0474_bin['TotalBad'] = tab_S0474_bin.Bad.sum()\n",
    "tab_S0474_bin['WoE'] = np.log((tab_S0474_bin.Bad/tab_S0474_bin.TotalBad)/(tab_S0474_bin.Good/tab_S0474_bin.TotalGood))\n",
    "tab_S0474_bin['IV'] = ((tab_S0474_bin.Bad/tab_S0474_bin.TotalBad)-(tab_S0474_bin.Good/tab_S0474_bin.TotalGood))*tab_S0474_bin.WoE\n",
    "tab_S0474_bin['IV_sum'] = tab_S0474_bin.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S0474_bin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3478</td>\n",
       "      <td>457</td>\n",
       "      <td>3935</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.100878</td>\n",
       "      <td>0.002765</td>\n",
       "      <td>0.012133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>543</td>\n",
       "      <td>94</td>\n",
       "      <td>637</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.174837</td>\n",
       "      <td>0.001489</td>\n",
       "      <td>0.012133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6687</td>\n",
       "      <td>1034</td>\n",
       "      <td>7721</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.061921</td>\n",
       "      <td>0.002172</td>\n",
       "      <td>0.012133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1104</td>\n",
       "      <td>152</td>\n",
       "      <td>1256</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.054163</td>\n",
       "      <td>0.000259</td>\n",
       "      <td>0.012133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>366</td>\n",
       "      <td>33</td>\n",
       "      <td>399</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.477474</td>\n",
       "      <td>0.005448</td>\n",
       "      <td>0.012133</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Good   Bad  Good&Bad  TotalGood  TotalBad       WoE        IV  \\\n",
       "S0474_bin                                                                  \n",
       "0          3478   457      3935      12178      1770 -0.100878  0.002765   \n",
       "1           543    94       637      12178      1770  0.174837  0.001489   \n",
       "2          6687  1034      7721      12178      1770  0.061921  0.002172   \n",
       "3          1104   152      1256      12178      1770 -0.054163  0.000259   \n",
       "4           366    33       399      12178      1770 -0.477474  0.005448   \n",
       "\n",
       "             IV_sum  \n",
       "S0474_bin            \n",
       "0          0.012133  \n",
       "1          0.012133  \n",
       "2          0.012133  \n",
       "3          0.012133  \n",
       "4          0.012133  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_S0474_bin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 每月出帐额 S0048 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1.479100e+04\n",
       "mean     4.505633e+04\n",
       "std      2.095457e+05\n",
       "min      0.000000e+00\n",
       "25%      0.000000e+00\n",
       "50%      9.825100e+03\n",
       "75%      3.530722e+04\n",
       "max      1.344334e+07\n",
       "Name: S0048, dtype: float64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0048.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c80c004f60>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nBfT/AdXADXFvxbxHAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c80c0f6a58>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_clean.S0048.plot(kind='box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_clean['S0048_bin'] = pd.cut(df_clean.S0048, bins=[-1,5000,10000,30000,40000,np.inf],labels=np.arange(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['S0048_bin'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['S0048_bin'])\n",
    "tab_S0048_bin = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_S0048_bin.columns=['Good','Bad']\n",
    "tab_S0048_bin['Good&Bad'] = tab_S0048_bin.Good+tab_S0048_bin.Bad\n",
    "tab_S0048_bin['TotalGood'] = tab_S0048_bin.Good.sum()\n",
    "tab_S0048_bin['TotalBad'] = tab_S0048_bin.Bad.sum()\n",
    "tab_S0048_bin['WoE'] = np.log((tab_S0048_bin.Bad/tab_S0048_bin.TotalBad)/(tab_S0048_bin.Good/tab_S0048_bin.TotalGood))\n",
    "tab_S0048_bin['IV'] = ((tab_S0048_bin.Bad/tab_S0048_bin.TotalBad)-(tab_S0048_bin.Good/tab_S0048_bin.TotalGood))*tab_S0048_bin.WoE\n",
    "tab_S0048_bin['IV_sum'] = tab_S0048_bin.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S0048_bin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4859</td>\n",
       "      <td>620</td>\n",
       "      <td>5479</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.130217</td>\n",
       "      <td>0.006344</td>\n",
       "      <td>0.013902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1358</td>\n",
       "      <td>192</td>\n",
       "      <td>1550</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.027621</td>\n",
       "      <td>0.000084</td>\n",
       "      <td>0.013902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2572</td>\n",
       "      <td>413</td>\n",
       "      <td>2985</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.099660</td>\n",
       "      <td>0.002206</td>\n",
       "      <td>0.013902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>609</td>\n",
       "      <td>117</td>\n",
       "      <td>726</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.279007</td>\n",
       "      <td>0.004490</td>\n",
       "      <td>0.013902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2780</td>\n",
       "      <td>428</td>\n",
       "      <td>3208</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.057568</td>\n",
       "      <td>0.000779</td>\n",
       "      <td>0.013902</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Good  Bad  Good&Bad  TotalGood  TotalBad       WoE        IV  \\\n",
       "S0048_bin                                                                 \n",
       "0          4859  620      5479      12178      1770 -0.130217  0.006344   \n",
       "1          1358  192      1550      12178      1770 -0.027621  0.000084   \n",
       "2          2572  413      2985      12178      1770  0.099660  0.002206   \n",
       "3           609  117       726      12178      1770  0.279007  0.004490   \n",
       "4          2780  428      3208      12178      1770  0.057568  0.000779   \n",
       "\n",
       "             IV_sum  \n",
       "S0048_bin            \n",
       "0          0.013902  \n",
       "1          0.013902  \n",
       "2          0.013902  \n",
       "3          0.013902  \n",
       "4          0.013902  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_S0048_bin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 每月入账额 S0047"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1.479100e+04\n",
       "mean     3.368742e+04\n",
       "std      2.993836e+05\n",
       "min      0.000000e+00\n",
       "25%      0.000000e+00\n",
       "50%      0.000000e+00\n",
       "75%      2.000000e+03\n",
       "max      1.830007e+07\n",
       "Name: S0047, dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0047.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c80c0cdc88>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c80c1105f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_clean.S0047.plot(kind='box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_clean['S0047_bin'] = pd.cut(df_clean.S0047, bins=[-1,1000,2000,20000,np.inf],labels=np.arange(4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['S0047_bin'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['S0047_bin'])\n",
    "tab_S0047_bin = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_S0047_bin.columns=['Good','Bad']\n",
    "tab_S0047_bin['Good&Bad'] = tab_S0047_bin.Good+tab_S0047_bin.Bad\n",
    "tab_S0047_bin['TotalGood'] = tab_S0047_bin.Good.sum()\n",
    "tab_S0047_bin['TotalBad'] = tab_S0047_bin.Bad.sum()\n",
    "tab_S0047_bin['WoE'] = np.log((tab_S0047_bin.Bad/tab_S0047_bin.TotalBad)/(tab_S0047_bin.Good/tab_S0047_bin.TotalGood))\n",
    "tab_S0047_bin['IV'] = ((tab_S0047_bin.Bad/tab_S0047_bin.TotalBad)-(tab_S0047_bin.Good/tab_S0047_bin.TotalGood))*tab_S0047_bin.WoE\n",
    "tab_S0047_bin['IV_sum'] = tab_S0047_bin.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S0047_bin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8865</td>\n",
       "      <td>1250</td>\n",
       "      <td>10115</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.030316</td>\n",
       "      <td>0.000659</td>\n",
       "      <td>0.003673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>317</td>\n",
       "      <td>45</td>\n",
       "      <td>362</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.023588</td>\n",
       "      <td>0.000014</td>\n",
       "      <td>0.003673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1652</td>\n",
       "      <td>277</td>\n",
       "      <td>1929</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.142927</td>\n",
       "      <td>0.002979</td>\n",
       "      <td>0.003673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1344</td>\n",
       "      <td>198</td>\n",
       "      <td>1542</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.013513</td>\n",
       "      <td>0.000020</td>\n",
       "      <td>0.003673</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Good   Bad  Good&Bad  TotalGood  TotalBad       WoE        IV  \\\n",
       "S0047_bin                                                                  \n",
       "0          8865  1250     10115      12178      1770 -0.030316  0.000659   \n",
       "1           317    45       362      12178      1770 -0.023588  0.000014   \n",
       "2          1652   277      1929      12178      1770  0.142927  0.002979   \n",
       "3          1344   198      1542      12178      1770  0.013513  0.000020   \n",
       "\n",
       "             IV_sum  \n",
       "S0047_bin            \n",
       "0          0.003673  \n",
       "1          0.003673  \n",
       "2          0.003673  \n",
       "3          0.003673  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_S0047_bin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 单笔5000元以上的交易笔数 S0010"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    14791.000000\n",
       "mean         2.050436\n",
       "std         11.220937\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          0.000000\n",
       "75%          1.000000\n",
       "max        626.000000\n",
       "Name: S0010, dtype: float64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0010.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_clean['S0010_bin'] = pd.cut(df_clean.S0010, bins=[-1,1,2,10,np.inf],labels=np.arange(4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['S0010_bin'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['S0010_bin'])\n",
    "tab_S0010_bin = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_S0010_bin.columns=['Good','Bad']\n",
    "tab_S0010_bin['Good&Bad'] = tab_S0010_bin.Good+tab_S0010_bin.Bad\n",
    "tab_S0010_bin['TotalGood'] = tab_S0010_bin.Good.sum()\n",
    "tab_S0010_bin['TotalBad'] = tab_S0010_bin.Bad.sum()\n",
    "tab_S0010_bin['WoE'] = np.log((tab_S0010_bin.Bad/tab_S0010_bin.TotalBad)/(tab_S0010_bin.Good/tab_S0010_bin.TotalGood))\n",
    "tab_S0010_bin['IV'] = ((tab_S0010_bin.Bad/tab_S0010_bin.TotalBad)-(tab_S0010_bin.Good/tab_S0010_bin.TotalGood))*tab_S0010_bin.WoE\n",
    "tab_S0010_bin['IV_sum'] = tab_S0010_bin.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S0010_bin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9635</td>\n",
       "      <td>1402</td>\n",
       "      <td>11037</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.001149</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.015789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>579</td>\n",
       "      <td>119</td>\n",
       "      <td>698</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.346473</td>\n",
       "      <td>0.006821</td>\n",
       "      <td>0.015789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1356</td>\n",
       "      <td>194</td>\n",
       "      <td>1550</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.015785</td>\n",
       "      <td>0.000028</td>\n",
       "      <td>0.015789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>608</td>\n",
       "      <td>55</td>\n",
       "      <td>663</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.474190</td>\n",
       "      <td>0.008940</td>\n",
       "      <td>0.015789</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Good   Bad  Good&Bad  TotalGood  TotalBad       WoE        IV  \\\n",
       "S0010_bin                                                                  \n",
       "0          9635  1402     11037      12178      1770  0.001149  0.000001   \n",
       "1           579   119       698      12178      1770  0.346473  0.006821   \n",
       "2          1356   194      1550      12178      1770 -0.015785  0.000028   \n",
       "3           608    55       663      12178      1770 -0.474190  0.008940   \n",
       "\n",
       "             IV_sum  \n",
       "S0010_bin            \n",
       "0          0.015789  \n",
       "1          0.015789  \n",
       "2          0.015789  \n",
       "3          0.015789  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_S0010_bin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 每月交易笔数 S0046"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    14791.000000\n",
       "mean        21.706781\n",
       "std         41.253178\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%         10.000000\n",
       "75%         26.000000\n",
       "max        904.000000\n",
       "Name: S0046, dtype: float64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0046.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c80c107128>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nXIIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c80c23cd30>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_clean.S0046.plot(kind='box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_clean['S0046_bin'] = pd.cut(df_clean.S0046, bins=[-1,5,10,20,40,np.inf],labels=np.arange(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['S0046_bin'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['S0046_bin'])\n",
    "tab_S0046_bin = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_S0046_bin.columns=['Good','Bad']\n",
    "tab_S0046_bin['Good&Bad'] = tab_S0046_bin.Good+tab_S0046_bin.Bad\n",
    "tab_S0046_bin['TotalGood'] = tab_S0046_bin.Good.sum()\n",
    "tab_S0046_bin['TotalBad'] = tab_S0046_bin.Bad.sum()\n",
    "tab_S0046_bin['WoE'] = np.log((tab_S0046_bin.Bad/tab_S0046_bin.TotalBad)/(tab_S0046_bin.Good/tab_S0046_bin.TotalGood))\n",
    "tab_S0046_bin['IV'] = ((tab_S0046_bin.Bad/tab_S0046_bin.TotalBad)-(tab_S0046_bin.Good/tab_S0046_bin.TotalGood))*tab_S0046_bin.WoE\n",
    "tab_S0046_bin['IV_sum'] = tab_S0046_bin.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S0046_bin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5026</td>\n",
       "      <td>621</td>\n",
       "      <td>5647</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.162397</td>\n",
       "      <td>0.010047</td>\n",
       "      <td>0.019252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1279</td>\n",
       "      <td>232</td>\n",
       "      <td>1511</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.221555</td>\n",
       "      <td>0.005771</td>\n",
       "      <td>0.019252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2045</td>\n",
       "      <td>334</td>\n",
       "      <td>2379</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.116639</td>\n",
       "      <td>0.002423</td>\n",
       "      <td>0.019252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1950</td>\n",
       "      <td>306</td>\n",
       "      <td>2256</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.076652</td>\n",
       "      <td>0.000978</td>\n",
       "      <td>0.019252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1878</td>\n",
       "      <td>277</td>\n",
       "      <td>2155</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.014706</td>\n",
       "      <td>0.000034</td>\n",
       "      <td>0.019252</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Good  Bad  Good&Bad  TotalGood  TotalBad       WoE        IV  \\\n",
       "S0046_bin                                                                 \n",
       "0          5026  621      5647      12178      1770 -0.162397  0.010047   \n",
       "1          1279  232      1511      12178      1770  0.221555  0.005771   \n",
       "2          2045  334      2379      12178      1770  0.116639  0.002423   \n",
       "3          1950  306      2256      12178      1770  0.076652  0.000978   \n",
       "4          1878  277      2155      12178      1770  0.014706  0.000034   \n",
       "\n",
       "             IV_sum  \n",
       "S0046_bin            \n",
       "0          0.019252  \n",
       "1          0.019252  \n",
       "2          0.019252  \n",
       "3          0.019252  \n",
       "4          0.019252  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_S0046_bin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 每月出行 S0501"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    14791.000000\n",
       "mean         7.417686\n",
       "std         11.251581\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          3.000000\n",
       "75%         10.000000\n",
       "max        212.000000\n",
       "Name: S0501, dtype: float64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0501.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_clean['S0501_bin'] = pd.cut(df_clean.S0501, bins=[-1,1,3,10,np.inf],labels=np.arange(4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['S0501_bin'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['S0501_bin'])\n",
    "tab_S0501_bin = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_S0501_bin.columns=['Good','Bad']\n",
    "tab_S0501_bin['Good&Bad'] = tab_S0501_bin.Good+tab_S0501_bin.Bad\n",
    "tab_S0501_bin['TotalGood'] = tab_S0501_bin.Good.sum()\n",
    "tab_S0501_bin['TotalBad'] = tab_S0501_bin.Bad.sum()\n",
    "tab_S0501_bin['WoE'] = np.log((tab_S0501_bin.Bad/tab_S0501_bin.TotalBad)/(tab_S0501_bin.Good/tab_S0501_bin.TotalGood))\n",
    "tab_S0501_bin['IV'] = ((tab_S0501_bin.Bad/tab_S0501_bin.TotalBad)-(tab_S0501_bin.Good/tab_S0501_bin.TotalGood))*tab_S0501_bin.WoE\n",
    "tab_S0501_bin['IV_sum'] = tab_S0501_bin.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S0501_bin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4779</td>\n",
       "      <td>633</td>\n",
       "      <td>5412</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.092865</td>\n",
       "      <td>0.003232</td>\n",
       "      <td>0.006909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1378</td>\n",
       "      <td>206</td>\n",
       "      <td>1584</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.028139</td>\n",
       "      <td>0.000091</td>\n",
       "      <td>0.006909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3083</td>\n",
       "      <td>503</td>\n",
       "      <td>3586</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.115583</td>\n",
       "      <td>0.003585</td>\n",
       "      <td>0.006909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2938</td>\n",
       "      <td>428</td>\n",
       "      <td>3366</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.002290</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.006909</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Good  Bad  Good&Bad  TotalGood  TotalBad       WoE        IV  \\\n",
       "S0501_bin                                                                 \n",
       "0          4779  633      5412      12178      1770 -0.092865  0.003232   \n",
       "1          1378  206      1584      12178      1770  0.028139  0.000091   \n",
       "2          3083  503      3586      12178      1770  0.115583  0.003585   \n",
       "3          2938  428      3366      12178      1770  0.002290  0.000001   \n",
       "\n",
       "             IV_sum  \n",
       "S0501_bin            \n",
       "0          0.006909  \n",
       "1          0.006909  \n",
       "2          0.006909  \n",
       "3          0.006909  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_S0501_bin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 年交易金额在本市的排名 S0122"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    14791.000000\n",
       "mean        33.950713\n",
       "std         31.920249\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%         25.000000\n",
       "75%         55.000000\n",
       "max        100.000000\n",
       "Name: S0122, dtype: float64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0122.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c80c2cbcc0>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAD8CAYAAAB5Pm/hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAADI1JREFUeJzt3X+snYVdx/H3R8omGxOo3NTKj10Sm211brLdTOYSNSsq\nBjL4wxCWYO6UpDFBx8zMVrY/iH8s6eIyNcaZNGPaRDJGGKYNoNJUiJoI7vJDGXQbzUY3sNDL5hjT\nhcH29Y/7RG+6tpee5x5u+fb9SppzzvPze5Ob933y9J57UlVIkvr6sbUeQJI0XYZekpoz9JLUnKGX\npOYMvSQ1Z+glqTlDL0nNGXpJas7QS1Jz69Z6AICzzz67Zmdn13oMSXpFuf/++5+pqpmVtjshQj87\nO8vCwsJajyFJryhJDryU7bx1I0nNGXpJas7QS1Jzhl6SmjP0ktTciqFP8pkkh5J8cdmy9Un2JHls\neDxr2brrk+xP8uUkvz6twSVJL81LuaL/a+CSw5ZtA/ZW1SZg7/CaJJuBq4CfHfb5VJJTVm1aSdJx\nWzH0VfVPwLcOW3w5sHN4vhO4Ytnym6vq+ar6GrAfeMcqzSpJmsCkb5jaUFUHh+dPARuG5+cA9y7b\n7olh2Y9IshXYCnD++edPOIZ0fJK8LOfxs5h1Ihn9n7G19B193N/VVbWjquaqam5mZsV38EqroqqO\n+9/rP3z7ce8jnUgmDf3TSTYCDI+HhuVPAuct2+7cYZkkaY1MGvrdwPzwfB7YtWz5VUleneQCYBPw\nb+NGlCSNseI9+iSfBX4FODvJE8ANwHbgliTXAAeAKwGq6pEktwCPAi8C11bVD6Y0uyTpJVgx9FX1\n3qOs2nKU7T8GfGzMUJKk1eM7YyWpOUMvSc0ZeklqztBLUnOGXpKaM/SS1Jyhl6TmDL0kNWfoJak5\nQy9JzRl6SWrO0EtSc4Zekpoz9JLUnKGXpOYMvSQ1Z+glqTlDL0nNGXpJas7QS1Jzhl6SmjP0ktSc\noZek5gy9JDVn6CWpOUMvSc0ZeklqztBLUnOGXpKaM/SS1Nyo0Cf5gySPJPliks8m+fEk65PsSfLY\n8HjWag0rSTp+E4c+yTnA+4G5qnozcApwFbAN2FtVm4C9w2tJ0hoZe+tmHXBaknXAa4D/BC4Hdg7r\ndwJXjDyHJGmEiUNfVU8CnwC+DhwEnq2qu4ANVXVw2OwpYMPoKSVJExtz6+Yslq7eLwB+GnhtkquX\nb1NVBdRR9t+aZCHJwuLi4qRjSJJWMObWzcXA16pqsapeAG4DfhF4OslGgOHx0JF2rqodVTVXVXMz\nMzMjxpAkHcuY0H8duCjJa5IE2ALsA3YD88M288CucSNKksZYN+mOVXVfkluBB4AXgQeBHcDpwC1J\nrgEOAFeuxqCSpMlMHHqAqroBuOGwxc+zdHUvSToB+M5YSWrO0EtSc4Zekpoz9JLUnKGXpOYMvSQ1\nZ+glqTlDL0nNGXpJas7QS1Jzhl6SmjP0ktScoZek5gy9JDVn6CWpOUMvSc0ZeklqztBLUnOGXpKa\nM/SS1Jyhl6TmDL0kNWfoJak5Qy9JzRl6SWrO0EtSc4Zekpoz9JLUnKGXpOYMvSQ1Z+glqblRoU9y\nZpJbk3wpyb4k70yyPsmeJI8Nj2et1rCSpOM39or+z4C/r6o3Am8F9gHbgL1VtQnYO7yWJK2RiUOf\n5Azgl4AbAarq+1X1beByYOew2U7girFDSpImN+aK/gJgEfirJA8m+XSS1wIbqurgsM1TwIYj7Zxk\na5KFJAuLi4sjxpAkHcuY0K8D3gb8ZVVdCPw3h92mqaoC6kg7V9WOqpqrqrmZmZkRY0iSjmVM6J8A\nnqiq+4bXt7IU/qeTbAQYHg+NG1GSNMbEoa+qp4BvJHnDsGgL8CiwG5gfls0Du0ZNKEkaZd3I/X8f\nuCnJq4CvAr/N0g+PW5JcAxwArhx5DknSCKNCX1UPAXNHWLVlzHElSavHd8ZKUnOGXpKaM/SS1Jyh\nl6Tmxv7WjbSm3vpHd/Hs916Y+nlmt90x1eOfcdqp/PsNvzbVc+jkZej1ivbs917g8e2XrvUYo037\nB4lObt66kaTmDL0kNWfoJak5Qy9JzRl6SWrO0EtSc4Zekpoz9JLUnKGXpOYMvSQ1Z+glqTlDL0nN\nGXpJas7QS1Jzhl6SmjP0ktScoZek5gy9JDVn6CWpOUMvSc0ZeklqztBLUnOGXpKaM/SS1Nzo0Cc5\nJcmDSW4fXq9PsifJY8PjWePHlCRNajWu6K8D9i17vQ3YW1WbgL3Da0nSGhkV+iTnApcCn162+HJg\n5/B8J3DFmHNIksYZe0X/p8CHgB8uW7ahqg4Oz58CNow8hyRphIlDn+Qy4FBV3X+0baqqgDrK/luT\nLCRZWFxcnHQMSdIKxlzRvwt4T5LHgZuBdyf5G+DpJBsBhsdDR9q5qnZU1VxVzc3MzIwYQ5J0LBOH\nvqqur6pzq2oWuAr4x6q6GtgNzA+bzQO7Rk8pSZrYNH6Pfjvwq0keAy4eXkuS1si61ThIVd0D3DM8\n/yawZTWOK0kaz3fGSlJzhl6SmjP0ktScoZek5gy9JDVn6CWpOUMvSc0ZeklqztBLUnOGXpKaM/SS\n1Jyhl6TmDL0kNWfoJak5Qy9JzRl6SWrO0EtSc4Zekpoz9JLUnKGXpOYMvSQ1Z+glqTlDL0nNGXpJ\nam7dWg8gjfG6N23j53ZuW+sxRnvdmwAuXesx1JSh1yvac/u28/j2V34gZ7fdsdYjqDFv3UhSc4Ze\nkpoz9JLUnKGXpOYMvSQ1N3Hok5yX5O4kjyZ5JMl1w/L1SfYkeWx4PGv1xpUkHa8xV/QvAh+sqs3A\nRcC1STYD24C9VbUJ2Du8liStkYlDX1UHq+qB4flzwD7gHOByYOew2U7girFDSpImtyr36JPMAhcC\n9wEbqurgsOopYMNR9tmaZCHJwuLi4mqMIUk6gtGhT3I68HngA1X1neXrqqqAOtJ+VbWjquaqam5m\nZmbsGJKkoxgV+iSnshT5m6rqtmHx00k2Dus3AofGjShJGmPMb90EuBHYV1WfXLZqNzA/PJ8Hdk0+\nniRprDF/1OxdwG8BDyd5aFj2EWA7cEuSa4ADwJXjRpQkjTFx6KvqX4AcZfWWSY8rSVpdvjNWkpoz\n9JLUnKGXpOYMvSQ1Z+glqTlDL0nNGXpJas7QS1Jzhl6SmjP0ktScoZek5gy9JDVn6CWpOUMvSc0Z\neklqztBLUnOGXpKaM/SS1Jyhl6TmDL0kNWfoJak5Qy9JzRl6SWrO0EtSc4Zekpoz9JLUnKGXpOYM\nvSQ1Z+glqTlDL0nNTS30SS5J8uUk+5Nsm9Z5JEnHNpXQJzkF+AvgN4DNwHuTbJ7GuSRJxzatK/p3\nAPur6qtV9X3gZuDyKZ1LknQM0wr9OcA3lr1+YlgmSXqZrVurEyfZCmwFOP/889dqDDUwu+2Ol7zt\ngY9fNsVJ/t/rP3z7cW1/xmmnTmkSaXqhfxI4b9nrc4dl/6eqdgA7AObm5mpKc6i5x7dfenw7bPdb\nTSefad26+QKwKckFSV4FXAXsntK5JEnHMJUr+qp6McnvAf8AnAJ8pqoemca5JEnHNrV79FV1J3Dn\ntI4vSXppfGesJDVn6CWpOUMvSc0ZeklqztBLUnOpWvs3kCRZBA6s9RzSUZwNPLPWQ0hH8Pqqmllp\noxMi9NKJLMlCVc2t9RzSpLx1I0nNGXpJas7QSyvbsdYDSGN4j16SmvOKXpKaM/Q6KST5aJJHkvxH\nkoeS/MLwZ7TvGz7A/nPDn9QmyRuT/GuS55P84bJjnJfk7iSPDse6btm6P07ypeH4f5vkzLX4OqUj\nMfRqL8k7gcuAt1XVW4CLWfqoy48Df1JVPwP8F3DNsMu3gPcDnzjsUC8CH6yqzcBFwLXLPvR+D/Dm\n4fhfAa6f4pckHRdDr5PBRuCZqnoeoKqeAQ4C7wZuHbbZCVwxrD9UVV8AXlh+kKo6WFUPDM+fA/Yx\nfBZyVd1VVS8Om97L0qeqSScEQ6+TwV3AeUm+kuRTSX4Z+Eng28vifFwfYJ9kFrgQuO8Iq38H+LtR\nE0uryNCrvar6LvB2lj6MfhH4HPC+SY+X5HTg88AHquo7h637KEu3eG6a9PjSapvaJ0xJJ5Kq+gFw\nD3BPkoeBeeDMJOuGq/of+QD7I0lyKkuRv6mqbjts3ftY+r+ALeXvLesE4hW92kvyhiSbli36eZb+\niN7dwG8Oy+aBXSscJ8CNwL6q+uRh6y4BPgS8p6r+Z7Vml1aDb5hSe0neDvw5cCZLt1X2s3Qb5yeA\nm4H1wIPA1VX1fJKfAhaG9T8EvgtsBt4C/DPw8LAc4CNVdWeS/cCrgW8Oy++tqt99Gb48aUWGXpKa\n89aNJDVn6CWpOUMvSc0ZeklqztBLUnOGXpKaM/SS1Jyhl6Tm/hdcVQoraDvx3gAAAABJRU5ErkJg\ngg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c80c2c4ac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_clean.S0122.plot(kind='box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_clean['S0122_bin'] = pd.cut(df_clean.S0122, bins=[-1,15,25,40,55,70,np.inf],labels=np.arange(6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['S0122_bin'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['S0122_bin'])\n",
    "tab_S0122_bin = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_S0122_bin.columns=['Good','Bad']\n",
    "tab_S0122_bin['Good&Bad'] = tab_S0122_bin.Good+tab_S0122_bin.Bad\n",
    "tab_S0122_bin['TotalGood'] = tab_S0122_bin.Good.sum()\n",
    "tab_S0122_bin['TotalBad'] = tab_S0122_bin.Bad.sum()\n",
    "tab_S0122_bin['WoE'] = np.log((tab_S0122_bin.Bad/tab_S0122_bin.TotalBad)/(tab_S0122_bin.Good/tab_S0122_bin.TotalGood))\n",
    "tab_S0122_bin['IV'] = ((tab_S0122_bin.Bad/tab_S0122_bin.TotalBad)-(tab_S0122_bin.Good/tab_S0122_bin.TotalGood))*tab_S0122_bin.WoE\n",
    "tab_S0122_bin['IV_sum'] = tab_S0122_bin.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S0122_bin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4997</td>\n",
       "      <td>645</td>\n",
       "      <td>5642</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.118691</td>\n",
       "      <td>0.005451</td>\n",
       "      <td>0.016687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1195</td>\n",
       "      <td>220</td>\n",
       "      <td>1415</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.236378</td>\n",
       "      <td>0.006185</td>\n",
       "      <td>0.016687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1710</td>\n",
       "      <td>280</td>\n",
       "      <td>1990</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.119192</td>\n",
       "      <td>0.002119</td>\n",
       "      <td>0.016687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1338</td>\n",
       "      <td>211</td>\n",
       "      <td>1549</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.081578</td>\n",
       "      <td>0.000762</td>\n",
       "      <td>0.016687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1070</td>\n",
       "      <td>169</td>\n",
       "      <td>1239</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.083136</td>\n",
       "      <td>0.000633</td>\n",
       "      <td>0.016687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1868</td>\n",
       "      <td>245</td>\n",
       "      <td>2113</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.102714</td>\n",
       "      <td>0.001538</td>\n",
       "      <td>0.016687</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Good  Bad  Good&Bad  TotalGood  TotalBad       WoE        IV  \\\n",
       "S0122_bin                                                                 \n",
       "0          4997  645      5642      12178      1770 -0.118691  0.005451   \n",
       "1          1195  220      1415      12178      1770  0.236378  0.006185   \n",
       "2          1710  280      1990      12178      1770  0.119192  0.002119   \n",
       "3          1338  211      1549      12178      1770  0.081578  0.000762   \n",
       "4          1070  169      1239      12178      1770  0.083136  0.000633   \n",
       "5          1868  245      2113      12178      1770 -0.102714  0.001538   \n",
       "\n",
       "             IV_sum  \n",
       "S0122_bin            \n",
       "0          0.016687  \n",
       "1          0.016687  \n",
       "2          0.016687  \n",
       "3          0.016687  \n",
       "4          0.016687  \n",
       "5          0.016687  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_S0122_bin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 夜消费金额占比 S0174"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    14791.000000\n",
       "mean         7.250152\n",
       "std         16.325647\n",
       "min        -27.000000\n",
       "25%          0.000000\n",
       "50%          0.000000\n",
       "75%          6.000000\n",
       "max        105.000000\n",
       "Name: S0174, dtype: float64"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0174.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c80c2d2780>"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c80c8f4048>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_clean.S0174.plot(kind='box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_clean['S0174'] = df_clean.S0174.apply(lambda x: 0 if x<0 else x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    14791.000000\n",
       "mean         7.254614\n",
       "std         16.321373\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          0.000000\n",
       "75%          6.000000\n",
       "max        105.000000\n",
       "Name: S0174, dtype: float64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.S0174.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_clean['S0174_bin'] = pd.cut(df_clean.S0174, bins=[-1,5,7,20,50,np.inf],labels=np.arange(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['S0174_bin'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['S0174_bin'])\n",
    "tab_S0174_bin = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_S0174_bin.columns=['Good','Bad']\n",
    "tab_S0174_bin['Good&Bad'] = tab_S0174_bin.Good+tab_S0174_bin.Bad\n",
    "tab_S0174_bin['TotalGood'] = tab_S0174_bin.Good.sum()\n",
    "tab_S0174_bin['TotalBad'] = tab_S0174_bin.Bad.sum()\n",
    "tab_S0174_bin['WoE'] = np.log((tab_S0174_bin.Bad/tab_S0174_bin.TotalBad)/(tab_S0174_bin.Good/tab_S0174_bin.TotalGood))\n",
    "tab_S0174_bin['IV'] = ((tab_S0174_bin.Bad/tab_S0174_bin.TotalBad)-(tab_S0174_bin.Good/tab_S0174_bin.TotalGood))*tab_S0174_bin.WoE\n",
    "tab_S0174_bin['IV_sum'] = tab_S0174_bin.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S0174_bin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9143</td>\n",
       "      <td>1217</td>\n",
       "      <td>10360</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.087948</td>\n",
       "      <td>0.005559</td>\n",
       "      <td>0.021154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>324</td>\n",
       "      <td>66</td>\n",
       "      <td>390</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.337563</td>\n",
       "      <td>0.003606</td>\n",
       "      <td>0.021154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1301</td>\n",
       "      <td>222</td>\n",
       "      <td>1523</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.160440</td>\n",
       "      <td>0.002983</td>\n",
       "      <td>0.021154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>194</td>\n",
       "      <td>1197</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.285759</td>\n",
       "      <td>0.007785</td>\n",
       "      <td>0.021154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>407</td>\n",
       "      <td>71</td>\n",
       "      <td>478</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.182518</td>\n",
       "      <td>0.001221</td>\n",
       "      <td>0.021154</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Good   Bad  Good&Bad  TotalGood  TotalBad       WoE        IV  \\\n",
       "S0174_bin                                                                  \n",
       "0          9143  1217     10360      12178      1770 -0.087948  0.005559   \n",
       "1           324    66       390      12178      1770  0.337563  0.003606   \n",
       "2          1301   222      1523      12178      1770  0.160440  0.002983   \n",
       "3          1003   194      1197      12178      1770  0.285759  0.007785   \n",
       "4           407    71       478      12178      1770  0.182518  0.001221   \n",
       "\n",
       "             IV_sum  \n",
       "S0174_bin            \n",
       "0          0.021154  \n",
       "1          0.021154  \n",
       "2          0.021154  \n",
       "3          0.021154  \n",
       "4          0.021154  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_S0174_bin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 年龄 AGE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    14791.000000\n",
       "mean        30.171185\n",
       "std          5.775204\n",
       "min         21.000000\n",
       "25%         26.000000\n",
       "50%         29.000000\n",
       "75%         33.000000\n",
       "max         61.000000\n",
       "Name: AGE, dtype: float64"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.AGE.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c80c560208>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAD8CAYAAABn919SAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAErZJREFUeJzt3X+MVeWdx/HPx2EKal3BOJlMFDpxQ1u6UIftrekqMaLF\ntLZB3Ri3ZGvYLAFxu8QmJgX0j9Vks7EbqG38AwKFwPYH1dgaCd01Ugp/oI11qBRo6epuF0MpDlOt\nVm0H6cx3/7gHcgdm5p6ZuXfu3Oe8X8nNvc9zz3G+JsxnnjzPOedxRAgA0PwuanQBAIDaINABIBEE\nOgAkgkAHgEQQ6ACQCAIdABJBoANAIgh0AEgEgQ4AiZgykT/syiuvjM7Ozon8kQDQ9A4cOPC7iGir\ndtyEBnpnZ6e6u7sn8kcCQNOz/Vqe45hyAYBEEOgAkAgCHQASQaADQCIIdABIBIGOQtuxY4fmzp2r\nlpYWzZ07Vzt27Gh0ScCYTehli8BksmPHDj300EPasmWLFixYoP3792vZsmWSpCVLljS4OmD0PJFb\n0JVKpeA6dEwWc+fO1eOPP66FCxee69u7d69WrVqlI0eONLAyYDDbByKiVPU4Ah1F1dLSor6+PrW2\ntp7rO3PmjKZNm6b+/v4GVgYMljfQmUNHYc2ZM0f79+8f1Ld//37NmTOnQRUB45NrDt32dEnflDRX\nUkj6R0n/LekJSZ2Sjkm6OyJ+X5cqgTp46KGHdNttt6mvr+9c37Rp07R169YGVgWMXd4R+jckPRsR\nH5V0raSjktZI2hMRsyXtydpA09i2bZv6+vo0Y8YMSdKMGTPU19enbdu2NbYwYIyqBrrtyyXdKGmL\nJEXE+xHxlqTbJW3PDtsu6Y56FQnUw+7du3XffffpzTffVETozTff1H333afdu3c3ujRgTKouitru\nkrRJ0i9VHp0fkHS/pBMRMT07xpJ+f7Z93vkrJK2QpFmzZn3itddyPTQMqDvbeuutt3T55Zef63v7\n7bc1ffp0TeTFAkA1tVwUnSLpryVtiIj5kt7TedMrUf7XP+RvQERsiohSRJTa2qo+zheYMLa1du3a\nQX1r165VeXwCNJ88gf4bSb+JiBez9lMqB3yP7Q5Jyt5P1adEoD4WLVqkDRs2qKWlRbbV0tKiDRs2\naNGiRY0uDRiTqoEeEa9LOm77I1nXLSpPv+yUtDTrWyrpmbpUCNTJhz/8YUnSwMDAoPez/UCzyXuV\nyypJ37F9SFKXpH+T9KikRbZflfTprA00jc2bN2v9+vWKiHOv9evXa/PmzY0uDRgT7hRFYdnWe++9\np0suueRc3x//+EddeumlLIpiUuFOUaCKqVOnauPGjYP6Nm7cqKlTpzaoImB8eNoiCmv58uVavXq1\nJGnlypXauHGjVq9erZUrVza4MmBsCHQU1uOPPy5JevDBB/XAAw9o6tSpWrly5bl+oNkwhw4Akxxz\n6ABQMAQ6ACSCQEehzZo1S7bPvWbNmtXokoAxI9BRWLNmzdLx48d1/fXX67e//a2uv/56HT9+nFBH\n0yLQUVhnw/z5559XR0eHnn/++XOhDjQjAh2F9tRTT43YBpoJgY5Cu+uuu0ZsA82EG4tQWDNnztQL\nL7xwwfPPZ86c2aCKgPFhhI7Cmj79gg22RuwHJjsCHYV1+PBhLV68eNDjcxcvXqzDhw83ujRgTAh0\nFNqWLVtGbAPNJFeg2z5m+7Dtg7a7s76HbZ/I+g7avq2+pQK1t2zZshHbQDMZzaLowoj43Xl9j0XE\nuloWBEyUefPmaefOnRcsis6bN69BFQHjw5QLCuuVV14ZVT8w2eUN9JD0I9sHbK+o6F9l+5DtrbZn\n1KE+oG5Onz6t9vb2QYui7e3tOn36dKNLA8Ykb6AviIguSZ+V9CXbN0raIOkalTeNPilp/VAn2l5h\nu9t2d29vby1qBmpm3759I7aBZpIr0CPiRPZ+StLTkq6LiJ6I6I+IAUmbJV03zLmbIqIUEaW2trZa\n1Q3UxE033TRiG2gmVQPd9qW2Lzv7WdKtko7Y7qg47E5JR+pTIlAfU6dOVU9Pz6DH5/b09LBJNJpW\nnqtc2iU9nV0JMEXSdyPiWdvfst2l8vz6MUn31q1KoA6GmytnDh3NqmqgR8SvJV07RP89dakImECt\nra16//33z7U/8IEP6MyZMw2sCBg7LltEoe3du3fENtBMCHQU2sKFC0dsA82Ex+ei0M6cOXPBnaJA\ns2KEDgCJINBRaK2trYPuFG1tbW10ScCYEegoNBZFkRICHYXGoihSwqIoCo1FUaSEEToKa7ggJ+DR\nrAh0FFZEaNq0aYMWRc+2gWZEoKPQeHwuUkKgo9B4fC5SwqIoCsu2+vr6LpgzZw4dzYoROgpruLly\n5tDRrAh0FNpFF100aFH0oov4lUDz4l8vCu25554bsQ00k1xz6LaPSXpHUr+kP0dEyfYVkp6Q1Kny\njkV3R8Tv61MmUB+33nqr+vv7B7WBZjWaEfrCiOiKiFLWXiNpT0TMlrQnawNNZWBgYNCeogMDA40u\nCRiz8Uy53C5pe/Z5u6Q7xl8OAGCs8gZ6SPqR7QO2V2R97RFxMvv8usqbSQNNp3JRFGhmeQN9QUR0\nSfqspC/ZvrHyyyj/Jgz522B7he1u2929vb3jqxaosV27do3YBpqJRzsqsf2wpHclLZd0U0SctN0h\naV9EfGSkc0ulUnR3d4+1VqCmzt5AVPk7MFQf0Gi2D1SsXw6r6gjd9qW2Lzv7WdKtko5I2ilpaXbY\nUknPjL1coHEqF0WBZpbnssV2SU9n/9inSPpuRDxr+yVJT9peJuk1SXfXr0wAQDVVAz0ifi3p2iH6\n35B0Sz2KAibSUFMuQDPiTlEU2rp160ZsA81k1Iui48GiKCaTkUbjLIpiMqnZoihQBPPnz290CcC4\nEeiApJdffrnRJQDjRqCj0JYvXz7oTtHly5c3uiRgzJhDR2FxYxGaRd45dLagQ+FxqSJSwZQLACSC\nEToKjxuLkApG6Ci0T37ykyO2gWZCoKPQXnrppRHbQDNhygWFxzQLUsEIHQASwQgdhceiKFLBCB2F\n9vGPf3zENtBMCHQU2qFDh0ZsA80kd6DbbrH9su1dWfth2ydsH8xet9WvTKB+2IIOqRjNHPr9ko5K\n+ouKvscigh0BAGASyDVCt321pM9J+mZ9ywEmXuXTFoFmlnfK5euSviJp4Lz+VbYP2d5qe8ZQJ9pe\nYbvbdndvb+94agVq7qqrrhqxDTSTqoFu+/OSTkXEgfO+2iDpGkldkk5KWj/U+RGxKSJKEVFqa2sb\nb71ATZ04cWLENtBM8syh3yBpcbboOU3SX9j+dkR88ewBtjdL2lWnGoG6YjEUqag6Qo+ItRFxdUR0\nSvqCpB9HxBdtd1QcdqekI3WqEQCQw3juFP13212SQtIxSffWpCJggnGnKFIxqkCPiH2S9mWf76lD\nPcCEamlpuaDd39/foGqA8eFOURTa+eFNmKOZEegoPNuaMmUK0y1oegQ6Cqty7rxyZM4NRmhWPD4X\nhUZ4IyUEOpI0UdMn/EHAZMKUC5JU+XyWPK8Prd416nMIc0w2BDoAJIJAB4BEEOgAkAgCHQASQaAD\nQCIIdABIBIEOAIkg0AEgEQQ6ACQid6DbbrH9su1dWfsK27ttv5q9D7lJNABgYoxmhH6/pKMV7TWS\n9kTEbEl7sjYAoEFyBbrtqyV9TtI3K7pvl7Q9+7xd0h21LQ0AMBp5R+hfl/QVSQMVfe0RcTL7/Lqk\n9loWBgAYnaqBbvvzkk5FxIHhjonyY+eGfPSc7RW2u2139/b2jr1SAMCI8ozQb5C02PYxSd+TdLPt\nb0vqsd0hSdn7qaFOjohNEVGKiFJbW1uNygYAnK9qoEfE2oi4OiI6JX1B0o8j4ouSdkpamh22VNIz\ndasSAFDVeK5Df1TSItuvSvp01gYANMiotqCLiH2S9mWf35B0S+1LAgCMBXeKAkAiCHQASASBDgCJ\nINABIBEEOgAkgkAHgEQQ6ACQCAIdABJBoANAIgh0AEgEgQ4AiSDQASARBDoAJIJAB4BEEOgAkAgC\nHQASkWeT6Gm2f2r757Z/YfuRrP9h2ydsH8xet9W/XADAcPLsWHRa0s0R8a7tVkn7bf9X9t1jEbGu\nfuUBAPKqGugREZLezZqt2SvqWRQAYPRyzaHbbrF9UNIpSbsj4sXsq1W2D9neantG3aoEAFSVK9Aj\noj8iuiRdLek623MlbZB0jaQuSSclrR/qXNsrbHfb7u7t7a1R2QCA843qKpeIeEvSXkmfiYieLOgH\nJG2WdN0w52yKiFJElNra2sZfMQBgSHmucmmzPT37fLGkRZJ+Zbuj4rA7JR2pT4kAgDzyXOXSIWm7\n7RaV/wA8GRG7bH/LdpfKC6THJN1bvzIBANXkucrlkKT5Q/TfU5eKAABjwp2iAJAIAh0AEkGgA0Ai\nCHQASASBDgCJyHPZItBQ1z7ynN7+05m6/5zONT+s63//8otb9fN/ubWuPwPFRqBj0nv7T2d07NHP\nNbqMcav3HwyAKRcASASBDgCJINABIBEEOgAkgkAHgEQQ6ACQCAIdABJBoANAIgh0AEhEni3optn+\nqe2f2/6F7Uey/its77b9avY+o/7lAgCGk2eEflrSzRFxraQuSZ+x/SlJayTtiYjZkvZkbQBAg1QN\n9Ch7N2u2Zq+QdLuk7Vn/dkl31KVCAEAuuebQbbfYPijplKTdEfGipPaIOJkd8rqk9mHOXWG723Z3\nb29vTYoGAFwoV6BHRH9EdEm6WtJ1tuee932oPGof6txNEVGKiFJbW9u4CwYADG1UV7lExFuS9kr6\njKQe2x2SlL2fqn15AIC88lzl0mZ7evb5YkmLJP1K0k5JS7PDlkp6pl5FAgCqy7PBRYek7bZbVP4D\n8GRE7LL9E0lP2l4m6TVJd9exTgBAFVUDPSIOSZo/RP8bkm6pR1FApcvmrNG87c1/VexlcySp+Xde\nwuTFFnSY9N45+ihb0AE5cOs/ACSCQAeARBDoAJAIAh0AEkGgA0AiCHQASASBDgCJINABIBEEOgAk\ngkAHgEQQ6ACQCAIdABJBoANAInjaIppCCk8qvPzi1kaXgMRVDXTbMyX9h8qbQIekTRHxDdsPS1ou\n6ezOzw9GxH/Wq1AU10Q8OrdzzQ+TeEQvii3PCP3Pkh6IiJ/ZvkzSAdu7s+8ei4h19SsPAJBXnh2L\nTko6mX1+x/ZRSVfVuzAAwOiMalHUdqfK29G9mHWtsn3I9lbbM2pcGwBgFHIHuu0PSvq+pC9HxB8k\nbZB0jaQulUfw64c5b4Xtbtvdvb29Qx0CAKiBXIFuu1XlMP9ORPxAkiKiJyL6I2JA0mZJ1w11bkRs\niohSRJTa2tpqVTcA4DxVA922JW2RdDQivlbR31Fx2J2SjtS+PABAXnmucrlB0j2SDts+mPU9KGmJ\n7S6VL2U8JuneulQIAMglz1Uu+yV5iK+45hwAJhFu/QeARBDoAJAIAh0AEkGgA0AiCHQASASBDgCJ\nINABIBEEOgAkgkAHgEQQ6ACQCAIdABJBoANAIgh0AEgEgQ4AiSDQASAReTa4AJpOeaOtUZ7z1dH/\nnIgY/UlAneTZgm6m7b22f2n7F7bvz/qvsL3b9qvZ+4z6lwvkExET8gImkzxTLn+W9EBEfEzSpyR9\nyfbHJK2RtCciZkvak7UBAA1SNdAj4mRE/Cz7/I6ko5KuknS7pO3ZYdsl3VGvIgEA1Y1qUdR2p6T5\nkl6U1B4RJ7OvXpfUXtPKAACjkjvQbX9Q0vclfTki/lD5XZQnE4ecULS9wna37e7e3t5xFQsAGF6u\nQLfdqnKYfycifpB199juyL7vkHRqqHMjYlNElCKi1NbWVouaAQBDyHOViyVtkXQ0Ir5W8dVOSUuz\nz0slPVP78gAAeeW5Dv0GSfdIOmz7YNb3oKRHJT1pe5mk1yTdXZ8SAQB5VA30iNgvabi7NG6pbTkA\ngLHyRN4cYbtX5dE8MNlcKel3jS4CGMaHIqLqIuSEBjowWdnujohSo+sAxoOHcwFAIgh0AEgEgQ6U\nbWp0AcB4MYcOAIlghA4AiSDQUQi277Adtj9a0Tfb9i7b/2v7QPbc/xuz7/7Bdq/tgxWvjzXu/wCo\njkBHUSyRtD97l+1pkn4oaVNE/GVEfELSKknXVJzzRER0Vbx+OeFVA6NAoCN52ZNCF0haJukLWfff\nS/pJROw8e1xEHImIbRNfIVAb7CmKIrhd0rMR8YrtN2x/QtJfSfpZlfP+zvaCivbfRMSf6lYlME4E\nOopgiaRvZJ+/l7UHsf20pNmSXomIv826n4iIf56YEoHxI9CRNNtXSLpZ0jzbIalF5c1YHpF049nj\nIuJO2yVJ6xpSKFADzKEjdXdJ+lZEfCgiOiNipqT/k/Q/km6wvbji2EsaUiFQI4zQkbolkr56Xt/3\nVV4c/bykr9n+uqQeSe9I+teK486fQ/+niHihnsUC48GdogCQCKZcACARBDoAJIJAB4BEEOgAkAgC\nHQASQaADQCIIdABIBIEOAIn4f5aMPOYIhlhpAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c80cf27710>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_clean.AGE.plot('box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_clean['AGE_bin'] = pd.cut(df_clean.AGE, bins=[18,22,25,28,32,40,50,np.inf],labels=np.arange(7))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grouped_0 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE=='A'].groupby(['AGE_bin'])\n",
    "grouped_1 = df_clean[df_clean.APP_EXT_CARD_AMT_PDUE.isin(['F','D'])].groupby(['AGE_bin'])\n",
    "tab_AGE_bin = pd.concat([grouped_0.size(),grouped_1.size()],axis=1)\n",
    "tab_AGE_bin.columns=['Good','Bad']\n",
    "tab_AGE_bin['Good&Bad'] = tab_AGE_bin.Good+tab_AGE_bin.Bad\n",
    "tab_AGE_bin['TotalGood'] = tab_AGE_bin.Good.sum()\n",
    "tab_AGE_bin['TotalBad'] = tab_AGE_bin.Bad.sum()\n",
    "tab_AGE_bin['WoE'] = np.log((tab_AGE_bin.Bad/tab_AGE_bin.TotalBad)/(tab_AGE_bin.Good/tab_AGE_bin.TotalGood))\n",
    "tab_AGE_bin['IV'] = ((tab_AGE_bin.Bad/tab_AGE_bin.TotalBad)-(tab_AGE_bin.Good/tab_AGE_bin.TotalGood))*tab_AGE_bin.WoE\n",
    "tab_AGE_bin['IV_sum'] = tab_AGE_bin.IV.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AGE_bin\n",
       "0     579\n",
       "1    2127\n",
       "2    2937\n",
       "3    3182\n",
       "4    2636\n",
       "5     656\n",
       "6      61\n",
       "dtype: int64"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped_0.size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AGE_bin\n",
       "0     22\n",
       "1    222\n",
       "2    412\n",
       "3    540\n",
       "4    447\n",
       "5    119\n",
       "6      8\n",
       "dtype: int64"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped_1.size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "A    12178\n",
       "F     1267\n",
       "D      503\n",
       "C      420\n",
       "E      234\n",
       "B      189\n",
       "Name: APP_EXT_CARD_AMT_PDUE, dtype: int64"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.APP_EXT_CARD_AMT_PDUE.value_counts(dropna=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Good</th>\n",
       "      <th>Bad</th>\n",
       "      <th>Good&amp;Bad</th>\n",
       "      <th>TotalGood</th>\n",
       "      <th>TotalBad</th>\n",
       "      <th>WoE</th>\n",
       "      <th>IV</th>\n",
       "      <th>IV_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE_bin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>579</td>\n",
       "      <td>22</td>\n",
       "      <td>601</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-1.341609</td>\n",
       "      <td>0.047111</td>\n",
       "      <td>0.079075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2127</td>\n",
       "      <td>222</td>\n",
       "      <td>2349</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.331139</td>\n",
       "      <td>0.016304</td>\n",
       "      <td>0.079075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2937</td>\n",
       "      <td>412</td>\n",
       "      <td>3349</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.035469</td>\n",
       "      <td>0.000298</td>\n",
       "      <td>0.079075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3182</td>\n",
       "      <td>540</td>\n",
       "      <td>3722</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.154955</td>\n",
       "      <td>0.006786</td>\n",
       "      <td>0.079075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2636</td>\n",
       "      <td>447</td>\n",
       "      <td>3083</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.154192</td>\n",
       "      <td>0.005564</td>\n",
       "      <td>0.079075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>656</td>\n",
       "      <td>119</td>\n",
       "      <td>775</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>0.221614</td>\n",
       "      <td>0.002962</td>\n",
       "      <td>0.079075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>61</td>\n",
       "      <td>8</td>\n",
       "      <td>69</td>\n",
       "      <td>12178</td>\n",
       "      <td>1770</td>\n",
       "      <td>-0.102781</td>\n",
       "      <td>0.000050</td>\n",
       "      <td>0.079075</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Good  Bad  Good&Bad  TotalGood  TotalBad       WoE        IV  \\\n",
       "AGE_bin                                                                 \n",
       "0         579   22       601      12178      1770 -1.341609  0.047111   \n",
       "1        2127  222      2349      12178      1770 -0.331139  0.016304   \n",
       "2        2937  412      3349      12178      1770 -0.035469  0.000298   \n",
       "3        3182  540      3722      12178      1770  0.154955  0.006786   \n",
       "4        2636  447      3083      12178      1770  0.154192  0.005564   \n",
       "5         656  119       775      12178      1770  0.221614  0.002962   \n",
       "6          61    8        69      12178      1770 -0.102781  0.000050   \n",
       "\n",
       "           IV_sum  \n",
       "AGE_bin            \n",
       "0        0.079075  \n",
       "1        0.079075  \n",
       "2        0.079075  \n",
       "3        0.079075  \n",
       "4        0.079075  \n",
       "5        0.079075  \n",
       "6        0.079075  "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab_AGE_bin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 常住城市（交易笔数最多) S0483"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "327"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_clean.S0483.value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2590088567372051"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_clean.S0483[df_clean.S0483==0])/len(df_clean.S0483)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## IV值列表"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| 变量  | IV      |  变量含义\n",
    "| --------   | -----:  | :----:  |\n",
    "| S0476 | 0.015   |  消费档次\n",
    "| S0483 | NA      |  常住城市（交易笔数最多)\n",
    "| S0106 | 0.001   |  境外交易金额占比\n",
    "| S0005 | 0.001   |  资产标记\n",
    "| S0467 | 0.008   |  卡等级\n",
    "| S0474 | 0.012   |  月还贷能力评测（预授信额度）\n",
    "| S0048 | 0.014   |  每月出帐额\n",
    "| S0047 | 0.004   |  每月入账额\n",
    "| S0010 | 0.016   |  单笔5000元以上的交易笔数\n",
    "| S0046 | 0.019   |  每月交易笔数\n",
    "| S0464 | 0.008   |  卡性质\n",
    "| S0501 | 0.007   |  每月出行\n",
    "| S0122 | 0.017   |  年交易金额在本市的排名\n",
    "| S0174 | 0.021   |  夜消费金额占比\n",
    "| AGE   | 0.096   |  年龄"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 建模"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def targetDef(x):\n",
    "    if x in [\"A\"]:\n",
    "        return 0\n",
    "    if x in [\"F\",\"D\"]:\n",
    "        return 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y = df_clean[\"APP_EXT_CARD_AMT_PDUE\"].map(targetDef).dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "modelDf = df_clean.loc[df_clean[\"APP_EXT_CARD_AMT_PDUE\"].map(targetDef).dropna().index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "modelDf_dummied = pd.get_dummies(modelDf.filter(axis=1, like=\"_bin\"), drop_first= True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import statsmodels.discrete.discrete_model as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.394238\n",
      "         Iterations 6\n"
     ]
    }
   ],
   "source": [
    "logit = sm.Logit(y,modelDf_dummied)\n",
    "m = logit.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Logit Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th> <td>APP_EXT_CARD_AMT_PDUE</td> <th>  No. Observations:  </th>  <td> 13948</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                 <td>Logit</td>         <th>  Df Residuals:      </th>  <td> 13911</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                 <td>MLE</td>          <th>  Df Model:          </th>  <td>    36</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Thu, 14 Sep 2017</td>    <th>  Pseudo R-squ.:     </th> <td>-0.03624</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>09:01:44</td>        <th>  Log-Likelihood:    </th> <td> -5498.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>converged:</th>             <td>True</td>          <th>  LL-Null:           </th> <td> -5306.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th> </th>                        <td> </td>           <th>  LLR p-value:       </th>  <td> 1.000</td> \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "       <td></td>          <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0106_bin</th>   <td>   -0.1140</td> <td>    0.073</td> <td>   -1.553</td> <td> 0.120</td> <td>   -0.258</td> <td>    0.030</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0474_bin_1</th> <td>   -0.2673</td> <td>    0.169</td> <td>   -1.580</td> <td> 0.114</td> <td>   -0.599</td> <td>    0.064</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0474_bin_2</th> <td>   -0.4511</td> <td>    0.139</td> <td>   -3.241</td> <td> 0.001</td> <td>   -0.724</td> <td>   -0.178</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0474_bin_3</th> <td>   -0.4689</td> <td>    0.161</td> <td>   -2.910</td> <td> 0.004</td> <td>   -0.785</td> <td>   -0.153</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0474_bin_4</th> <td>   -0.6415</td> <td>    0.233</td> <td>   -2.751</td> <td> 0.006</td> <td>   -1.099</td> <td>   -0.184</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0048_bin_1</th> <td>    0.0658</td> <td>    0.114</td> <td>    0.579</td> <td> 0.563</td> <td>   -0.157</td> <td>    0.289</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0048_bin_2</th> <td>    0.2413</td> <td>    0.108</td> <td>    2.240</td> <td> 0.025</td> <td>    0.030</td> <td>    0.452</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0048_bin_3</th> <td>    0.4482</td> <td>    0.150</td> <td>    2.987</td> <td> 0.003</td> <td>    0.154</td> <td>    0.742</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0048_bin_4</th> <td>    0.4975</td> <td>    0.139</td> <td>    3.584</td> <td> 0.000</td> <td>    0.225</td> <td>    0.770</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0047_bin_1</th> <td>   -0.0978</td> <td>    0.168</td> <td>   -0.583</td> <td> 0.560</td> <td>   -0.427</td> <td>    0.231</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0047_bin_2</th> <td>    0.0275</td> <td>    0.081</td> <td>    0.338</td> <td> 0.736</td> <td>   -0.132</td> <td>    0.187</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0047_bin_3</th> <td>   -0.1509</td> <td>    0.109</td> <td>   -1.387</td> <td> 0.165</td> <td>   -0.364</td> <td>    0.062</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0010_bin_1</th> <td>    0.0904</td> <td>    0.120</td> <td>    0.752</td> <td> 0.452</td> <td>   -0.145</td> <td>    0.326</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0010_bin_2</th> <td>   -0.3262</td> <td>    0.120</td> <td>   -2.724</td> <td> 0.006</td> <td>   -0.561</td> <td>   -0.092</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0010_bin_3</th> <td>   -0.7134</td> <td>    0.187</td> <td>   -3.821</td> <td> 0.000</td> <td>   -1.079</td> <td>   -0.347</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0046_bin_1</th> <td>    0.3271</td> <td>    0.113</td> <td>    2.904</td> <td> 0.004</td> <td>    0.106</td> <td>    0.548</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0046_bin_2</th> <td>    0.1984</td> <td>    0.118</td> <td>    1.683</td> <td> 0.092</td> <td>   -0.033</td> <td>    0.429</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0046_bin_3</th> <td>    0.1549</td> <td>    0.131</td> <td>    1.180</td> <td> 0.238</td> <td>   -0.102</td> <td>    0.412</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0046_bin_4</th> <td>    0.1177</td> <td>    0.147</td> <td>    0.802</td> <td> 0.422</td> <td>   -0.170</td> <td>    0.405</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0501_bin_1</th> <td>   -0.1857</td> <td>    0.109</td> <td>   -1.708</td> <td> 0.088</td> <td>   -0.399</td> <td>    0.027</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0501_bin_2</th> <td>   -0.1560</td> <td>    0.102</td> <td>   -1.524</td> <td> 0.128</td> <td>   -0.357</td> <td>    0.045</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0501_bin_3</th> <td>   -0.2867</td> <td>    0.122</td> <td>   -2.350</td> <td> 0.019</td> <td>   -0.526</td> <td>   -0.048</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0122_bin_1</th> <td>   -0.0519</td> <td>    0.124</td> <td>   -0.419</td> <td> 0.675</td> <td>   -0.294</td> <td>    0.191</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0122_bin_2</th> <td>   -0.1349</td> <td>    0.137</td> <td>   -0.987</td> <td> 0.323</td> <td>   -0.403</td> <td>    0.133</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0122_bin_3</th> <td>   -0.1399</td> <td>    0.145</td> <td>   -0.962</td> <td> 0.336</td> <td>   -0.425</td> <td>    0.145</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0122_bin_4</th> <td>   -0.1399</td> <td>    0.148</td> <td>   -0.942</td> <td> 0.346</td> <td>   -0.431</td> <td>    0.151</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0122_bin_5</th> <td>   -0.2578</td> <td>    0.142</td> <td>   -1.820</td> <td> 0.069</td> <td>   -0.535</td> <td>    0.020</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0174_bin_1</th> <td>    0.3674</td> <td>    0.145</td> <td>    2.528</td> <td> 0.011</td> <td>    0.083</td> <td>    0.652</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0174_bin_2</th> <td>    0.1899</td> <td>    0.087</td> <td>    2.190</td> <td> 0.029</td> <td>    0.020</td> <td>    0.360</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0174_bin_3</th> <td>    0.3104</td> <td>    0.092</td> <td>    3.375</td> <td> 0.001</td> <td>    0.130</td> <td>    0.491</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>S0174_bin_4</th> <td>    0.1639</td> <td>    0.140</td> <td>    1.169</td> <td> 0.242</td> <td>   -0.111</td> <td>    0.439</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>AGE_bin_1</th>   <td>   -2.0310</td> <td>    0.078</td> <td>  -25.932</td> <td> 0.000</td> <td>   -2.185</td> <td>   -1.878</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>AGE_bin_2</th>   <td>   -1.7364</td> <td>    0.063</td> <td>  -27.670</td> <td> 0.000</td> <td>   -1.859</td> <td>   -1.613</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>AGE_bin_3</th>   <td>   -1.5526</td> <td>    0.058</td> <td>  -26.583</td> <td> 0.000</td> <td>   -1.667</td> <td>   -1.438</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>AGE_bin_4</th>   <td>   -1.5426</td> <td>    0.062</td> <td>  -24.843</td> <td> 0.000</td> <td>   -1.664</td> <td>   -1.421</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>AGE_bin_5</th>   <td>   -1.4685</td> <td>    0.106</td> <td>  -13.863</td> <td> 0.000</td> <td>   -1.676</td> <td>   -1.261</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>AGE_bin_6</th>   <td>   -1.7652</td> <td>    0.379</td> <td>   -4.656</td> <td> 0.000</td> <td>   -2.508</td> <td>   -1.022</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                             Logit Regression Results                            \n",
       "=================================================================================\n",
       "Dep. Variable:     APP_EXT_CARD_AMT_PDUE   No. Observations:                13948\n",
       "Model:                             Logit   Df Residuals:                    13911\n",
       "Method:                              MLE   Df Model:                           36\n",
       "Date:                   Thu, 14 Sep 2017   Pseudo R-squ.:                -0.03624\n",
       "Time:                           09:01:44   Log-Likelihood:                -5498.8\n",
       "converged:                          True   LL-Null:                       -5306.5\n",
       "                                           LLR p-value:                     1.000\n",
       "===============================================================================\n",
       "                  coef    std err          z      P>|z|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------\n",
       "S0106_bin      -0.1140      0.073     -1.553      0.120      -0.258       0.030\n",
       "S0474_bin_1    -0.2673      0.169     -1.580      0.114      -0.599       0.064\n",
       "S0474_bin_2    -0.4511      0.139     -3.241      0.001      -0.724      -0.178\n",
       "S0474_bin_3    -0.4689      0.161     -2.910      0.004      -0.785      -0.153\n",
       "S0474_bin_4    -0.6415      0.233     -2.751      0.006      -1.099      -0.184\n",
       "S0048_bin_1     0.0658      0.114      0.579      0.563      -0.157       0.289\n",
       "S0048_bin_2     0.2413      0.108      2.240      0.025       0.030       0.452\n",
       "S0048_bin_3     0.4482      0.150      2.987      0.003       0.154       0.742\n",
       "S0048_bin_4     0.4975      0.139      3.584      0.000       0.225       0.770\n",
       "S0047_bin_1    -0.0978      0.168     -0.583      0.560      -0.427       0.231\n",
       "S0047_bin_2     0.0275      0.081      0.338      0.736      -0.132       0.187\n",
       "S0047_bin_3    -0.1509      0.109     -1.387      0.165      -0.364       0.062\n",
       "S0010_bin_1     0.0904      0.120      0.752      0.452      -0.145       0.326\n",
       "S0010_bin_2    -0.3262      0.120     -2.724      0.006      -0.561      -0.092\n",
       "S0010_bin_3    -0.7134      0.187     -3.821      0.000      -1.079      -0.347\n",
       "S0046_bin_1     0.3271      0.113      2.904      0.004       0.106       0.548\n",
       "S0046_bin_2     0.1984      0.118      1.683      0.092      -0.033       0.429\n",
       "S0046_bin_3     0.1549      0.131      1.180      0.238      -0.102       0.412\n",
       "S0046_bin_4     0.1177      0.147      0.802      0.422      -0.170       0.405\n",
       "S0501_bin_1    -0.1857      0.109     -1.708      0.088      -0.399       0.027\n",
       "S0501_bin_2    -0.1560      0.102     -1.524      0.128      -0.357       0.045\n",
       "S0501_bin_3    -0.2867      0.122     -2.350      0.019      -0.526      -0.048\n",
       "S0122_bin_1    -0.0519      0.124     -0.419      0.675      -0.294       0.191\n",
       "S0122_bin_2    -0.1349      0.137     -0.987      0.323      -0.403       0.133\n",
       "S0122_bin_3    -0.1399      0.145     -0.962      0.336      -0.425       0.145\n",
       "S0122_bin_4    -0.1399      0.148     -0.942      0.346      -0.431       0.151\n",
       "S0122_bin_5    -0.2578      0.142     -1.820      0.069      -0.535       0.020\n",
       "S0174_bin_1     0.3674      0.145      2.528      0.011       0.083       0.652\n",
       "S0174_bin_2     0.1899      0.087      2.190      0.029       0.020       0.360\n",
       "S0174_bin_3     0.3104      0.092      3.375      0.001       0.130       0.491\n",
       "S0174_bin_4     0.1639      0.140      1.169      0.242      -0.111       0.439\n",
       "AGE_bin_1      -2.0310      0.078    -25.932      0.000      -2.185      -1.878\n",
       "AGE_bin_2      -1.7364      0.063    -27.670      0.000      -1.859      -1.613\n",
       "AGE_bin_3      -1.5526      0.058    -26.583      0.000      -1.667      -1.438\n",
       "AGE_bin_4      -1.5426      0.062    -24.843      0.000      -1.664      -1.421\n",
       "AGE_bin_5      -1.4685      0.106    -13.863      0.000      -1.676      -1.261\n",
       "AGE_bin_6      -1.7652      0.379     -4.656      0.000      -2.508      -1.022\n",
       "===============================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_curve, auc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAecAAAHiCAYAAADSwATnAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3XV8ltX/x/HXWbDRHdJIg4QyBQQBt1GjBJFSEL4SYhIK\nKKAYqAiioihSAtKi0t1gEBOQ7u7uwbb7/P6Yv1sQhMHu2vZ+Ph4+Hte57us+5zOJN+eqY6y1iIiI\niO/w83YBIiIicjOFs4iIiI9ROIuIiPgYhbOIiIiPUTiLiIj4GIWziIiIj1E4i4iI+BiFs0gSYIzZ\nZ4y5aoy5ZIw5ZowZZYxJc8PnjxtjFhtjLhpjzhtjZhhjSvyrj3TGmC+MMQf+7mf33+0snv+JRJI3\nhbNI0lHPWpsGKAs8DLwFYIypCMwHpgE5gQLABuBXY8yDfx+TAlgElARqAemAisAp4DHP/hgiYvSG\nMJHEzxizD2hrrV34d/tToKS1to4xZgWw0Vr70r++Mwc4aa1tZYxpC/QFClprL3m4fBH5F82cRZIY\nY0xuoDawyxiTCngc+PE2h04Gqv+9HQ7MVTCL+AaFs0jSMdUYcxE4CJwA3gUyEffn/Ohtjj8K/P/1\n5Mz/cYyIeIHCWSTpeMpamxaoBhQjLnjPAg7ggdsc/wBx15QBTv/HMSLiBQpnkSTGWrsMGAUMsNZe\nBn4HnrnNoU2IuwkMYCFQ0xiT2iNFisgdKZxFkqYvgOrGmDJAD+B5Y8xrxpi0xpiMxpgPibsb+72/\nj/+BuNPhPxljihlj/IwxmY0xbxtjIrzzI4gkXwpnkSTIWnsSGAO8Y61dCdQEGhF3XXk/cY9aVbbW\n7vz7+GvE3RS2DVgAXABWE3dqfJXHfwCRZE6PUomIiPgYzZxFRER8jMJZRETExyicRUREfIzCWURE\nxMconEVERHxMgLcGzpIli82fP7+3hhcREfG4yMjIU9barHc7zmvhnD9/ftauXeut4UVERDzOGLM/\nPsfptLaIiIiPUTiLiIj4GIWziIiIj/HaNefbiY6O5tChQ0RFRXm7FLmD4OBgcufOTWBgoLdLERFJ\nknwqnA8dOkTatGnJnz8/xhhvlyO3Ya3l9OnTHDp0iAIFCni7HBGRJMmnTmtHRUWROXNmBbMPM8aQ\nOXNmnd0QEXEjnwpnQMGcCOjXSETEvXwunH3B1KlTMcawbds2576lS5dSt27dm45r3bo1U6ZMAeKu\nl/fo0YPChQvzyCOPULFiRebMmZPgWj7++GMKFSpE0aJFmTdv3m2P6dOnD7ly5aJs2bKULVuW2bNn\n3/T5gQMHSJMmDQMGDLjlu/Xr1+ehhx66ad/kyZMpUaIEJUuWpEWLFgn+GURE5N741DVnXzFhwgQq\nV67MhAkTeO+99+L1nd69e3P06FE2bdpEUFAQx48fZ9myZQmqY8uWLUycOJHNmzdz5MgRwsPD2bFj\nB/7+/rcc27lzZ954443b9tOlSxdq1659y/6ff/6ZNGnS3LRv586dfPzxx/z6669kzJiREydOJOhn\nEBGRe6eZ879cunSJlStXMmLECCZOnBiv71y5coVhw4bx1VdfERQUBED27Nlp0qRJgmqZNm0azZo1\nIygoiAIFClCoUCFWr159T31MnTqVAgUKULJkyZv2X7p0iYEDB9KrV6+b9g8bNoyXX36ZjBkzApAt\nW7YE/QwiInLvfHbm/J6J34z1Xr1r373j59OmTaNWrVoUKVKEzJkzExkZSbly5e74nV27dpE3b17S\npUt31/E7d+7MkiVLbtnfrFkzevTocdO+w4cPU6FCBWc7d+7cHD58+Lb9fvXVV4wZM4aQkBA+++wz\nMmbMyKVLl+jXrx8LFiy45ZR279696dq1K6lSpbpp/44dOwCoVKkSsbGx9OnTh1q1at315xIREdfx\n2XD2lgkTJvD6668DcYE5YcIEypUr9583Qd3rzVGff/55gmv8t44dO9K7d2+MMc7QHTlyJH369KFz\n5863nLpev349u3fv5vPPP2ffvn03fRYTE8POnTtZunQphw4dokqVKmzcuJEMGTK4vG4REbk9nw3n\nu81w3eHMmTMsXryYjRs3YowhNjYWYwz9+/cnc+bMnD179pbjs2TJQqFChThw4AAXLly46+z5XmbO\nuXLl4uDBg872oUOHyJUr1y3fzZ49u3O7Xbt2zhvXVq1axZQpU+jWrRvnzp3Dz8+P4OBg/P39Wbt2\nLfnz5ycmJoYTJ05QrVo1li5dSu7cuSlfvjyBgYEUKFCAIkWKsHPnTh599NG7/w8UERHXsNZ65b9y\n5crZf9uyZcst+zzpu+++s+3bt79pX5UqVeyyZctsVFSUzZ8/v7PGffv22bx589pz585Za6198803\nbevWre21a9estdaeOHHCTp48OUH1bNq0yZYuXdpGRUXZPXv22AIFCtiYmJhbjjty5Ihze+DAgbZp\n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\n5n8A/HfMsdZPpT8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c81fe702b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fpr, tpr, _ = roc_curve(y,m.predict(modelDf_dummied))\n",
    "roc_auc = auc(fpr, tpr)\n",
    "plt.figure(figsize=(8,8))\n",
    "plt.title(\"ROC\")\n",
    "plt.plot(fpr, tpr, lw=2, color=\"purple\",label='AUC = %.4f'% roc_auc)\n",
    "plt.figaspect(20)\n",
    "plt.plot([0, 1], [0, 1], linestyle='--', lw=2, color='k',\n",
    "         label='Luck')\n",
    "plt.legend(loc='best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ksIdx = np.argmax([r1 - r2 for r1,r2 in zip(tpr,fpr)]) # find the indoex corresponding to the largest distance between"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ksValue = tpr[ksIdx] - fpr[ksIdx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c80e59d5f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.gcf()\n",
    "fig.set_size_inches(8, 6)\n",
    "plt.plot([i/fpr.size for i in range(fpr.size)],fpr,marker='.',label = \"1-Specifity\", linewidth=.1)\n",
    "plt.plot([i/tpr.size for i in range(tpr.size)],tpr,marker='.',label=\"Sensitivity\",linewidth = .1)\n",
    "plt.vlines(x=ksIdx/fpr.size, ymin= fpr[ksIdx],ymax=tpr[ksIdx],colors=\"r\")\n",
    "plt.legend([\"1-Specifity\",\"Sensitivity\",\"ks = %.4f\" % ksValue])\n",
    "plt.title(\"KS Graph\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
