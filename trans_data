# -*- coding: utf-8 -*-
"""
Created on Wed Dec 26 11:03:23 2018

@author: liwenhuan
"""
import pandas as pd
import numpy as np
import collections
import seaborn as sns
from IPython.display import display


def colormap_borrowtype6(x):

    if x >= 1:
        color = "orange"
    elif x >= 0.2021:
        color = "red"
    elif x >= 0.1516:
        color = 'blue'
    elif x >= 0:
        color = 'green'
    else:
        color = 'pink'
    return 'color: %s' % color


def colormap_borrowtype8(x):

    if x >= 1:
        color = "orange"
    elif x >= 0.0911:
        color = "red"
    elif x >= 0.0729:
        color = 'blue'
    elif x >= 0:
        color = 'green'
    else:
        color = 'pink'
    return 'color: %s' % color


delq_days = 30
account_id = "borrow_nid"
delq_amount = "m{}_account".format(delq_days)
delq_flag = "m{}".format(delq_days)
due_amount = "d{}_account".format(delq_days)
due_flag = "d{}".format(delq_days)
borrow_type = "borrow_type"
addmonth = "addmonth"


class trans_data(object):

    global account_id
    global delq_amount
    global delq_flag
    global due_amount
    global due_flag
    global colormap_borrowtype6
    global colormap_borrowtype8

    @classmethod
    def get_pivot_tab(cls, data, varList=None, margins=True,
                      subgroups=None, selected_month=None,
                      selected_borrow_type=None):

        idx = pd.IndexSlice
        if not varList:
            raise ValueError("no underlying variable selected")
        elif isinstance(varList, str):
            varList = [varList]

        if not selected_borrow_type:
            selected_borrow_type = slice(None)
        if not selected_month:
            selected_month = slice(None)

        cols = [borrow_type, addmonth]
        if subgroups:
            cols += subgroups

        value_cols = [account_id, delq_amount, due_amount, due_flag]
        selectedData = data[value_cols+varList+cols].copy(deep=True)

        if selectedData.isna().sum().any():
            to_rep = {}
            to_rep.update({v: -9999 for v in
                           selectedData.select_dtypes(
                                   include=[np.number]).columns})
            to_rep.update({v: "-9999" for v in
                           selectedData.select_dtypes(
                                   include=[np.object]).columns})
            selectedData.fillna(to_rep, inplace=True)

        tab = selectedData.pivot_table(values=value_cols,
                                       index=varList,
                                       columns=cols,
                                       aggfunc={due_amount: np.sum,
                                                delq_amount: np.sum,
                                                due_flag: np.sum,
                                                account_id: np.size},
                                       fill_value=0,
                                       margins=margins)

        _t1 = (tab.loc[:, delq_amount] / tab.loc[:, due_amount]).copy(
                deep=True).fillna(0)
        _t1 = pd.concat([_t1], axis=1, keys=['od_rate'])
        if margins:
            _t2 = tab.loc[:, account_id].div(
                    tab[account_id].iloc[-1], axis=1)
        else:
            _t2 = tab.loc[:, account_id].div(tab.loc[:, account_id].sum(
                axis=0))
        _t2 = pd.concat([_t2], axis=1, keys=['hit_rate'])
        result = pd.concat([tab, _t1, _t2], axis=1)
        output = result.loc[:,
                            idx[:, selected_borrow_type, selected_month, :]]\
            .copy(deep=True)
        return output

    @classmethod
    def style_od_tab(cls, input_tab=None, type6colormap=None,
                     type8colormap=None, backgroundmap=None):
        if type8colormap is None:
            type8colormap = colormap_borrowtype8
        if type6colormap is None:
            type6colormap = colormap_borrowtype6
        if backgroundmap is None:
            backgroundmap = sns.light_palette("gray", as_cmap=True)
        idx = pd.IndexSlice
        _tab = input_tab.copy(deep=True)
        od_tab = _tab.reindex(labels=["od_rate", "hit_rate",
                                      due_flag, account_id],
                              axis=1, level=0)
        style = od_tab.style
        for mapFunc, borrType in ((type6colormap, 6), (type8colormap, 8)):
            style.applymap(mapFunc, subset=idx[:, idx["od_rate",
                                                      borrType, :, :]])
            style.background_gradient(cmap=backgroundmap, axis=0)

        return od_tab, style

    @classmethod
    def display(cls, data, varList=None, margins=True, subgroups=None,
                selected_month=None, selected_borrow_type=None,
                type8colormap=None, type6colormap=None, backgroundmap=None):
        if selected_borrow_type is None:
            selected_borrow_type = [6, 8]
        elif not isinstance(selected_borrow_type, collections.Iterable):
            selected_borrow_type = [selected_borrow_type]
        for i in selected_borrow_type:
            tab = cls.get_pivot_tab(data, varList=varList, margins=True,
                                    subgroups=subgroups,
                                    selected_month=selected_month,
                                    selected_borrow_type=i)
            _t, style = cls.style_od_tab(input_tab=tab,
                                         type6colormap=type6colormap,
                                         type8colormap=type8colormap,
                                         backgroundmap=backgroundmap)
            display(style)
